/*! For license information please see CoCreate-sendgrid.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.sendgrid=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../../CoCreate-components/CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const actionName = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[actionName];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    } else {\n      let status = this.__runSpecialAction(actionName, data);\n\n      if (status === \"next\") {\n        this.__moveNextAction();\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.__moveNextAction(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {// CoCreate.logic.setLinkProcess(aTag)\n    }\n  },\n  //. special action\n  __runSpecialAction: function (actionName, data) {\n    let matches = /(\\w+)\\{([a-zA-Z0-9_ \\-#$.]+)\\}/gm.exec(actionName);\n\n    if (!matches || matches.length < 3) {\n      return \"next\";\n    }\n\n    let type = matches[1],\n        param = matches[2].trim();\n    if (!param) return \"next\";\n    const self = this;\n\n    switch (type) {\n      case 'event':\n        console.log(\"Waiting Event....\");\n        document.addEventListener(param, eventData => {\n          console.log('Event Action (Received event from other section) ====== ' + param);\n\n          self.__moveNextAction(eventData);\n        }, {\n          once: true\n        });\n        break;\n\n      case 'timeout':\n        let delayTime = parseInt(param);\n\n        if (delayTime > 0) {\n          setTimeout(function () {\n            console.log(\"Timeout ======= \" + param);\n\n            self.__moveNextAction(data);\n          }, parseInt(param));\n        }\n\n        break;\n\n      case 'action':\n        let btn = document.querySelector(param);\n\n        if (btn) {\n          btn.click();\n        }\n\n        break;\n\n      default:\n        return \"next\";\n    }\n  },\n  __moveNextAction: function (data) {\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-action/src/index.js\n")},"../../CoCreate-components/CoCreate-api/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _socketClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket-client */ "../../CoCreate-components/CoCreate-socket-client/src/index.js"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ "../../CoCreate-components/CoCreate-action/src/index.js"));\n\nvar _render = _interopRequireDefault(__webpack_require__(/*! @cocreate/render */ "../../CoCreate-components/CoCreate-render/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet socketApi = new _socketClient.default(\'api\');\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n      socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _action.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n    socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _render.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      socketApi.setGlobalScope(namespace);\n    } else {\n      socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\nCoCreateApi.createApiSocket(window.config.host ? window.config.host : \'server.cocreate.app\', window.config.organization_Id // window.config.apiKey\n// window.config.securityKey\n);\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uLi9Db0NyZWF0ZS1jb21wb25lbnRzL0NvQ3JlYXRlLWFwaS9zcmMvaW5kZXguanM/NTQxMSJdLCJuYW1lcyI6WyJzb2NrZXRBcGkiLCJDb0NyZWF0ZVNvY2tldCIsIkNvQ3JlYXRlQXBpIiwibW9kdWxlcyIsImluaXQiLCJuYW1lIiwibW9kdWxlIiwicmVnaXN0ZXIiLCJtX2luc3RhbmNlIiwic2VsZiIsImxpc3RlbiIsImRhdGEiLCJfX3Jlc3BvbnNlUHJvY2VzcyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJhY3Rpb24iLCJlbGVtZW50IiwiX19jb21tb25BY3Rpb24iLCJpZCIsIkNvQ3JlYXRlQWN0aW9uIiwiZW5kRXZlbnQiLCJjYWxsYmFjayIsImJ0biIsIm1fbmFtZSIsInR5cGUiLCJyZXNwb25zZSIsInJlbmRlciIsImRvY3VtZW50IiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiY29udGFpbmVyIiwiY2xvc2VzdCIsImdldEZvcm1EYXRhIiwic2VuZCIsIm1haW5BdHRyIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2V0QXR0cmlidXRlIiwiYXJyYXlfbmFtZSIsInZhbHVlIiwiX19nZXRFbFZhbHVlIiwicmUiLCJSZWdFeHAiLCJ0ZXN0IiwicmVwbGFjZSIsInB1c2giLCJrZXlzIiwiT2JqZWN0Iiwib2JqZWN0RGF0YSIsImsiLCJzcGxpdCIsImxlbmd0aCIsIm5ld0RhdGEiLCJfX2NyZWF0ZU9iamVjdCIsIl9fbWVyZ2VPYmplY3QiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsImNoZWNrZWQiLCJpbm5lckhUTUwiLCJ0YXJnZXQiLCJzb3VyY2UiLCJrZXkiLCJhc3NpZ24iLCJwYXRoIiwibmV3T2JqZWN0IiwiaSIsInJlcXVlc3RfZGF0YSIsImdldENvbW1vblBhcmFtc0V4dGVuZCIsIkNvQ3JlYXRlUmVuZGVyIiwic2VsZWN0b3IiLCJjcmVhdGVBcGlTb2NrZXQiLCJob3N0IiwibmFtZXNwYWNlIiwiY3JlYXRlIiwicm9vbSIsInNldEdsb2JhbFNjb3BlIiwiaW5mbyIsImFwaUtleSIsImNvbmZpZyIsInNlY3VyaXR5S2V5Iiwib3JnYW5pemF0aW9uX2lkIiwib3JnYW5pemF0aW9uX0lkIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFJQSxTQUFTLEdBQUcsSUFBSUMscUJBQUosQ0FBbUIsS0FBbkIsQ0FBaEI7QUFFQSxNQUFNQyxXQUFXLEdBQUc7QUFDbkJDLFNBQU8sRUFBRSxFQURVO0FBR25CQyxNQUFJLEVBQUUsVUFBUztBQUFDQyxRQUFEO0FBQU9DO0FBQVAsR0FBVCxFQUF5QjtBQUM5QixTQUFLQyxRQUFMLENBQWNGLElBQWQsRUFBb0JDLE1BQXBCO0FBQ0EsR0FMa0I7QUFPbkJDLFVBQVEsRUFBRSxVQUFTRixJQUFULEVBQWVHLFVBQWYsRUFBMkI7QUFDcEMsVUFBTUMsSUFBSSxHQUFHLElBQWI7O0FBQ0EsUUFBSSxPQUFPLEtBQUtOLE9BQUwsQ0FBYUUsSUFBYixDQUFQLEtBQThCLFdBQWxDLEVBQStDO0FBQzlDLFdBQUtGLE9BQUwsQ0FBYUUsSUFBYixJQUFxQkcsVUFBckI7QUFFQVIsZUFBUyxDQUFDVSxNQUFWLENBQWlCTCxJQUFqQixFQUF3Qk0sSUFBRCxJQUFVO0FBQ2hDRixZQUFJLENBQUNHLGlCQUFMLENBQXVCUCxJQUF2QixFQUE2Qk0sSUFBN0I7QUFDQSxPQUZELEVBSDhDLENBTzlDOztBQUVBLFVBQUlFLEtBQUssQ0FBQ0MsT0FBTixDQUFjTixVQUFVLENBQUMsU0FBRCxDQUF4QixDQUFKLEVBQTBDO0FBQ3pDQSxrQkFBVSxDQUFDLFNBQUQsQ0FBVixDQUFzQk8sT0FBdEIsQ0FBK0JDLE1BQUQsSUFBWTtBQUN6QyxjQUFJLE9BQU9SLFVBQVUsQ0FBRSxVQUFTUSxNQUFPLEVBQWxCLENBQWpCLEtBQTBDLFVBQTlDLEVBQTBEO0FBQ3pEUixzQkFBVSxDQUFFLFVBQVNR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Q0FBaUI7QUFDaEJELGlCQUFTLEVBQUVBLFNBREs7QUFFaEJFLFlBQUksRUFBRSxJQUZVO0FBR2hCSCxZQUFJLEVBQUVBO0FBSFUsT0FBakI7QUFLQXhFLGVBQVMsQ0FBQzRFLGNBQVYsQ0FBeUJILFNBQXpCO0FBQ0EsS0FQRCxNQU9PO0FBQ056RSxlQUFTLENBQUMwRSxNQUFWLENBQWlCO0FBQ2hCRCxpQkFBUyxFQUFFLElBREs7QUFFaEJFLFlBQUksRUFBRSxJQUZVO0FBR2hCSCxZQUFJLEVBQUVBO0FBSFUsT0FBakI7QUFLQTtBQUNELEdBMUxrQjtBQTRMbkJKLHVCQUFxQixFQUFFLFVBQVNTLElBQVQsRUFDdkI7QUFDQyxXQUFPO0FBQ04sZ0JBQW9CQSxJQUFJLENBQUNDLE1BQUwsSUFBZUMsTUFBTSxDQUFDRCxNQURwQztBQUVOLHFCQUFvQkQsSUFBSSxDQUFDRyxXQUFMLElBQW9CRCxNQUFNLENBQUNDLFdBRnpDO0FBR04seUJBQW9CSCxJQUFJLENBQUNJLGVBQUwsSUFBd0JGLE1BQU0sQ0FBQ0c7QUFIN0MsS0FBUDtBQUtBO0FBbk1rQixDQUFwQjtBQXNNQWhGLFdBQVcsQ0FBQ3FFLGVBQVosQ0FDQ1ksTUFBTSxDQUFDSixNQUFQLENBQWNQLElBQWQsR0FBcUJXLE1BQU0sQ0FBQ0osTUFBUCxDQUFjUCxJQUFuQyxHQUEwQyxxQkFEM0MsRUFFQ1csTUFBTSxDQUFDSixNQUFQLENBQWNHLGVBRmYsQ0FHQztBQUNBO0FBSkQ7ZUFPZWhGLFciLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1hcGkvc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvQ3JlYXRlU29ja2V0IGZyb20gXCJAY29jcmVhdGUvc29ja2V0LWNsaWVudFwiXG5pbXBvcnQgQ29DcmVhdGVBY3Rpb24gZnJvbSAnQGNvY3JlYXRlL2FjdGlvbidcbmltcG9ydCBDb0NyZWF0ZVJlbmRlciBmcm9tICdAY29jcmVhdGUvcmVuZGVyJ1xuXG5sZXQgc29ja2V0QXBpID0gbmV3IENvQ3JlYXRlU29ja2V0KCdhcGknKTtcblxuY29uc3QgQ29DcmVhdGVBcGkgPSB7IFxuXHRtb2R1bGVzOiB7IH0sXG5cdFxuXHRpbml0OiBmdW5jdGlvbih7bmFtZSwgbW9kdWxlfSkge1xuXHRcdHRoaXMucmVnaXN0ZXIobmFtZSwgbW9kdWxlKVx0XG5cdH0sXG5cdFxuXHRyZWdpc3RlcjogZnVuY3Rpb24obmFtZSwgbV9pbnN0YW5jZSkge1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5tb2R1bGVzW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dGhpcy5tb2R1bGVzW25hbWVdID0gbV9pbnN0YW5jZTtcblx0XHRcdFxuXHRcdFx0c29ja2V0QXBpLmxpc3RlbihuYW1lLCAoZGF0YSkgPT4ge1xuXHRcdFx0XHRzZWxmLl9fcmVzcG9uc2VQcm9jZXNzKG5hbWUsIGRhdGEpO1xuXHRcdFx0fSlcblx0XHRcdFxuXHRcdFx0Ly8uIHJlZ2lzdGVyIGFjdGlvbnNcblx0XHRcdFxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobV9pbnN0YW5jZVsnYWN0aW9ucyddKSkge1xuXHRcdFx0XHRtX2luc3RhbmNlWydhY3Rpb25zJ10uZm9yRWFjaCgoYWN0aW9uKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBtX2luc3RhbmNlW2BhY3Rpb25fJHthY3Rpb259YF0gIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdG1faW5zdGFuY2VbYGFjdGlvbl8ke2FjdGlvbn1gXSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fX2NvbW1vbkFjdGlvbihtX2luc3RhbmNlLmlkLCBhY3Rpb24sIGVsZW1lbnQpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBcblx0XHRcdFx0XHRDb0NyZWF0ZUFjdGlvbi5pbml0KHtcblx0XHRcdFx0XHRcdGFjdGlvbjogYWN0aW9uLFxuXHRcdFx0XHRcdFx0ZW5kRXZlbnQ6IGFjdGlvbixcblx0XHRcdFx0XHRcdGNhbGxiYWNrOiAoYnRuKSA9PiB7XG5cdFx0XHRcdFx0XHRcdG1faW5zdGFuY2VbYGFjdGlvbl8ke2FjdGlvbn1gXShidG4pO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0XG5cdF9fcmVzcG9uc2VQcm9jZXNzOiBmdW5jdGlvbihtX25hbWUsIGRhdGEpIHtcblx0XHRjb25zdCB7dHlwZSwgcmVzcG9uc2V9ID0gZGF0YTtcblx0XHRjb25zdCBtX2luc3RhbmNlID0gdGhpcy5tb2R1bGVzW21fbmFtZV1cblx0XHRcblx0XHRpZiAodHlwZSAmJiByZXNwb25zZSAmJiBtX2luc3RhbmNlKSB7XG5cdFx0XG5cdFx0XHRpZiAoIHR5cGVvZiBtX2luc3RhbmNlW2ByZW5kZXJfJHt0eXBlfWBdID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdG1faW5zdGFuY2VbYHJlbmRlcl8ke3R5cGV9YF0ocmVzcG9uc2UpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnJlbmRlcih0eXBlLCByZXNwb25zZSk7XG5cdFx0XHRcblx0XHRcdGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KHR5cGUsIHtcblx0XHRcdFx0ZGV0YWlsOiB7XG5cdFx0XHRcdFx0ZGF0YTogcmVzcG9uc2Vcblx0XHRcdFx0fVxuXHRcdFx0fSkpXG5cdFx0fVxuXHR9LFxuXHRcblx0X19jb21tb25BY3Rpb246IGZ1bmN0aW9uKGlkLCBhY3Rpb24sIGVsZW1lbnQpIHtcblx0XHRjb25zdCBjb250YWluZXIgPSBlbGVtZW50LmNsb3Nlc3QoXCJmb3JtXCIpIHx8IGRvY3VtZW50O1xuXHRcdGxldCBkYXRhID0gQ29DcmVhdGVBcGkuZ2V0Rm9ybURhdGEoaWQsIGFjdGlvbiwgIGNvbnRhaW5lcik7XG5cdFx0Q29DcmVhdGVBcGkuc2VuZChpZCwgYWN0aW9uLCBkYXRhKTtcblx0fSxcblx0XG5cdFxuXHRnZXRGb3JtRGF0YSA6IGZ1bmN0aW9uKG1fbmFtZSwgYWN0aW9uLCBjb250YWluZXIpe1xuXHRcdGNvbnN0IG1haW5BdHRyID0gYGRhdGEtJHttX25hbWV9YDtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRjb25zdCBlbGVtZW50cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKGBbJHttYWluQXR0cn1ePVwiJHthY3Rpb259LlwiXWApO1xuXG5cdFx0bGV0IGRhdGEgPSB7fVxuXHRcdGVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG5cdFx0XHRsZXQgbmFtZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG1haW5BdHRyKTtcblx0XHRcdGxldCBhcnJheV9uYW1lID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobWFpbkF0dHIgKyBcIl9hcnJheVwiKTtcblx0XHRcdGxldCB2YWx1ZSA9IHNlbGYuX19nZXRFbFZhbHVlKGVsZW1lbnQpO1xuXHRcdFx0XG5cdFx0XHRpZiAoIW5hbWUpIHJldHVyblxuXG5cdFx0XHRpZiAoYWN0aW9uKSB7XG5cdFx0XHRcdGxldCByZSA9IG5ldyBSZWdFeHAoYF4ke2FjdGlvbn0uYCwgJ2knKTtcblx0XHRcdFx0aWYgKHJlLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0XHRuYW1lID0gbmFtZS5yZXBsYWNlKHJlLCBcIlwiKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYgKGFycmF5X25hbWUpIHtcblx0XHRcdFx0aWYgKCFkYXRhW25hbWVdKSB7XG5cdFx0XHRcdFx0ZGF0YVtuYW1lXSA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFbbmFtZV0ucHVzaChzZWxmLmdldEZvcm1EYXRhKG1fbmFtZSwgYXJyYXlfbmFtZSwgZWxlbWVudCkpO1xuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRcdGRhdGFbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRsZXQga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpXG5cdFx0bGV0IG9iamVjdERhdGEgPSB7fTtcblx0XHRrZXlzLmZvckVhY2goKGspID0+IHtcblx0XHRcdGlmIChrLnNwbGl0KCcuJykubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRsZXQgbmV3RGF0YSA9IHNlbGYuX19jcmVhdGVPYmplY3QoZGF0YVtrXSwgayk7XG5cdFx0XHRcdGRlbGV0ZSBkYXRhW2tdXG5cdFx0XHRcdFxuXHRcdFx0XHRvYmplY3REYXRhID0gc2VsZi5fX21lcmdlT2JqZWN0KG9iamVjdERhdGEsIG5ld0RhdGEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b2JqZWN0RGF0YVtrXSA9IGRhdGFba107XG5cdFx0XHR9XG5cdFx0fSlcblx0XHRyZXR1cm4gb2JqZWN0RGF0YTtcblx0fSxcblx0XG5cdF9fZ2V0RWxWYWx1ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdGxldCB2YWx1ZSA9IG51bGw7XG5cdFx0aWYgKHR5cGVvZiBlbGVtZW50LnZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRzd2l0Y2ggKGVsZW1lbnQudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpKSB7XG5cdFx0XHRcdGNhc2UgJ2NoZWNrYm94Jzpcblx0XHRcdFx0XHRpZiAoZWxlbWVudC5jaGVja2VkKSB7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGVsZW1lbnQudmFsdWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuXHRcdFx0aWYgKCF2YWx1ZSkge1xuXHRcdFx0XHR2YWx1ZSA9IGVsZW1lbnQuaW5uZXJIVE1MO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdFxuXHRfX21lcmdlT2JqZWN0OiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuXHRcdHRhcmdldCA9IHRhcmdldCB8fCB7fTtcblx0XHRmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoc291cmNlKSkge1xuXHRcdFx0aWYgKHNvdXJjZVtrZXldIGluc3RhbmNlb2YgT2JqZWN0KSB7XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24oc291cmNlW2tleV0sIHRoaXMuX19tZXJnZU9iamVjdCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pKVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRPYmplY3QuYXNzaWduKHRhcmdldCB8fCB7fSwgc291cmNlKVxuXHRcdHJldHVybiB0YXJnZXRcblx0fSxcblx0XG5cdF9fY3JlYXRlT2JqZWN0OiBmdW5jdGlvbiAoZGF0YSwgcGF0aCkge1xuXHRcdGlmICghcGF0aCkgcmV0dXJuIGRhdGE7XG5cdFx0XG5cdFx0bGV0IGtleXMgPSBwYXRoLnNwbGl0KCcuJylcblx0XHRsZXQgbmV3T2JqZWN0ID0gZGF0YTtcblxuXHRcdGZvciAodmFyICBpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0bmV3T2JqZWN0ID0ge1trZXlzW2ldXTogbmV3T2JqZWN0fVx0XHRcdFx0XG5cdFx0fVxuXHRcdHJldHVybiBuZXdPYmplY3Q7XG5cdH0sXG5cdFxuXHRzZW5kIDogZnVuY3Rpb24obW9kdWxlLCBhY3Rpb24sIGRhdGEpeyBcblx0XHRsZXQgcmVxdWVzdF9kYXRhID0gdGhpcy5nZXRDb21tb25QYXJhbXNFeHRlbmQoZGF0YSB8fCB7fSk7XG5cdFx0cmVxdWVzdF9kYXRhID0gey4uLnJlcXVlc3RfZGF0YSwgZGF0YX07XG5cdFx0c29ja2V0QXBpLnNlbmQobW9kdWxlLCB7dHlwZTogYWN0aW9uLCBkYXRhOiByZXF1ZXN0X2RhdGF9KTtcblx0fSxcblx0XG5cdHJlbmRlcjogZnVuY3Rpb24oYWN0aW9uLCBkYXRhKSB7XG5cdFx0Q29DcmVhdGVSZW5kZXIuZGF0YSh7XG5cdFx0XHRzZWxlY3RvcjogYFtkYXRhLXRlbXBsYXRlX2lkPVwiJHthY3Rpb259XCJdYCwgXG5cdFx0XHRkYXRhOiBkYXRhXG5cdFx0fSk7XG5cdH0sXG5cdFxuXHRjcmVhdGVBcGlTb2NrZXQ6IGZ1bmN0aW9uKGhvc3QsIG5hbWVzcGFjZSkge1xuXHRcdGlmIChuYW1lc3BhY2UpIHtcblx0XHRcdHNvY2tldEFwaS5jcmVhdGUoe1xuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZSwgXG5cdFx0XHRcdHJvb206IG51bGwsXG5cdFx0XHRcdGhvc3Q6IGhvc3Rcblx0XHRcdH0pO1xuXHRcdFx0c29ja2V0QXBpLnNldEdsb2JhbFNjb3BlKG5hbWVzcGFjZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNvY2tldEFwaS5jcmVhdGUoe1xuXHRcdFx0XHRuYW1lc3BhY2U6IG51bGwsIFxuXHRcdFx0XHRyb29tOiBudWxsLFxuXHRcdFx0XHRob3N0OiBob3N0XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cdFxuXHRnZXRDb21tb25QYXJhbXNFeHRlbmQ6IGZ1bmN0aW9uKGluZm8pIFxuXHR7XG5cdFx0cmV0dXJuIHtcblx0XHRcdFwiYXBpS2V5XCI6ICAgICAgICAgICBpbmZvLmFwaUtleSB8fCBjb25maWcuYXBpS2V5LFxuXHRcdFx0XCJzZWN1cml0eUtleVwiOiAgICAgIGluZm8uc2VjdXJpdHlLZXkgfHwgY29uZmlnLnNlY3VyaXR5S2V5LFxuXHRcdFx0XCJvcmdhbml6YXRpb25faWRcIjogIGluZm8ub3JnYW5pemF0aW9uX2lkIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG5cdFx0fVxuXHR9XG59XG5cbkNvQ3JlYXRlQXBpLmNyZWF0ZUFwaVNvY2tldChcblx0d2luZG93LmNvbmZpZy5ob3N0ID8gd2luZG93LmNvbmZpZy5ob3N0IDogJ3NlcnZlci5jb2NyZWF0ZS5hcHAnLFxuXHR3aW5kb3cuY29uZmlnLm9yZ2FuaXphdGlvbl9JZFxuXHQvLyB3aW5kb3cuY29uZmlnLmFwaUtleVxuXHQvLyB3aW5kb3cuY29uZmlnLnNlY3VyaXR5S2V5XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBDb0NyZWF0ZUFwaTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-api/src/index.js\n')},"../../CoCreate-components/CoCreate-render/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * change name Class\n * add functionality to add value on any attr of each elements into template\n */\nconst CoCreateRender = {\n  __getValueFromObject: function (json, path) {\n    try {\n      if (typeof json == 'undefined' || !path) return false;\n      let jsonData = json,\n          subpath = path.split('.');\n\n      for (let i = 0; i < subpath.length; i++) {\n        jsonData = jsonData[subpath[i]];\n        if (!jsonData) return false;\n      }\n\n      return jsonData;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __getValue: function (data, attrValue) {\n    let result = /{{\\s*([\\w\\W]+)\\s*}}/g.exec(attrValue);\n\n    if (result) {\n      return this.__getValueFromObject(data, result[1].trim());\n    }\n\n    return false;\n  },\n  __createObject: function (data, path) {\n    try {\n      if (!path) return data;\n      let keys = path.split('.');\n      let newObject = data;\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        newObject = {\n          [keys[i]]: newObject\n        };\n      }\n\n      return newObject;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __replaceValue: function (data, inputValue) {\n    let isPass = false;\n    let self = this;\n    let resultValue = null; // let variables = inputValue.match(/{{\\s*(\\S+)\\s*}}/g);\n\n    let variables = inputValue.match(/{{([A-Za-z0-9_.,\\- ]*)}}/g);\n\n    if (variables) {\n      variables.forEach(attr => {\n        let value = self.__getValue(data, attr);\n\n        if (value && typeof value !== \"object\") {\n          isPass = true;\n          inputValue = inputValue.replace(attr, value);\n        }\n      });\n\n      if (isPass) {\n        resultValue = inputValue;\n      }\n    }\n\n    return resultValue;\n  },\n  setArray: function (template, data) {\n    const type = template.getAttribute('data-render_array') || \"data\";\n    const render_key = template.getAttribute('data-render_key') || type;\n    const self = this;\n\n    const arrayData = this.__getValueFromObject(data, type);\n\n    if (type && Array.isArray(arrayData)) {\n      arrayData.forEach((item, index) => {\n        let cloneEl = template.cloneNode(true);\n        cloneEl.classList.remove('template');\n        cloneEl.classList.add('clone_' + type);\n\n        if (typeof item !== 'object') {\n          item = {\n            \"--\": item\n          };\n        } else {\n          item['index'] = index;\n        }\n\n        let r_data = self.__createObject(item, render_key);\n\n        self.setValue([cloneEl], r_data);\n        template.insertAdjacentHTML('beforebegin', cloneEl.outerHTML);\n      });\n    }\n  },\n  setValue: function (els, data, passTo, template) {\n    if (!data) return;\n    const that = this;\n    Array.from(els).forEach(e => {\n      let passId = e.getAttribute('data-pass_id');\n\n      if (passTo && passId != passTo) {\n        return;\n      }\n\n      Array.from(e.attributes).forEach(attr => {\n        let attr_name = attr.name.toLowerCase();\n        let isPass = false;\n        let attrValue = attr.value;\n        attrValue = that.__replaceValue(data, attrValue);\n\n        if (attrValue) {\n          if (attr_name == 'value') {\n            let tag = e.tagName.toLowerCase();\n\n            switch (tag) {\n              case 'input':\n                e.setAttribute(attr_name, attrValue);\n                break;\n\n              case 'textarea':\n                e.setAttribute(attr_name, attrValue);\n                e.textContent = attrValue;\n                break;\n\n              default:\n                if (e.children.length === 0) {\n                  e.innerHTML = attrValue;\n                }\n\n            }\n          }\n\n          e.setAttribute(attr_name, attrValue);\n        }\n      });\n\n      if (e.children.length == 0 && e.textContent) {\n        let textContent = e.textContent;\n        textContent = that.__replaceValue(data, textContent);\n\n        if (textContent) {\n          e.textContent = textContent;\n        }\n      }\n\n      if (e.children.length > 0) {\n        that.setValue(e.children, data);\n\n        if (e.classList.contains('template')) {\n          that.setArray(e, data);\n        }\n      }\n    });\n  },\n  data: function ({\n    selector,\n    data,\n    elements,\n    passTo\n  }) {\n    if (selector) {\n      this.render(selector, data);\n    } else if (elements) {\n      this.setValue(elements, data, passTo);\n    }\n  },\n  render: function (selector, dataResult) {\n    let template_div = document.querySelector(selector);\n\n    if (!template_div) {\n      return;\n    }\n\n    if (Array.isArray(dataResult)) {\n      template_div.setAttribute('data-render_array', 'test');\n      this.setValue([template_div], {\n        test: dataResult\n      });\n    } else {\n      this.setValue(template_div.children, dataResult);\n    }\n  }\n};\nvar _default = CoCreateRender;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-render/src/index.js\n")},"../../CoCreate-components/CoCreate-socket-client/src/common-fun.js":(module,exports)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory(window);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== \'undefined\' ? self : void 0, function (wnd) {\n  function getCommonParams() {\n    let config = {};\n\n    if (wnd && wnd.config) {\n      config = wnd.config;\n    }\n\n    return {\n      "apiKey": config.apiKey,\n      "securityKey": config.securityKey,\n      "organization_id": config.organization_Id\n    };\n  }\n\n  function getCommonParamsExtend(info) {\n    let config = {};\n    if (wnd && wnd.config) config = wnd.config;\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n\n  function generateSocketClient(namespace, room) {\n    let config = {};\n    if (wnd && wnd.config) config = wnd.config;\n    let ns = namespace || config.organization_Id;\n    let rr = room || \'\';\n\n    if (rr) {\n      return `${ns}/${rr}`;\n    } else {\n      return ns;\n    }\n  }\n\n  function GenerateUUID(length = 36) {\n    let d = new Date().getTime();\n    let d2 = 0;\n    let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n    if (length <= pattern.length) {\n      pattern = pattern.substr(0, length);\n    } else {\n      let add_len = length - pattern.length;\n      let sub_pattern = "-xxxyyxxx";\n      let group_n = Math.floor(add_len / sub_pattern.length);\n\n      for (let i = 0; i < group_n; i++) {\n        pattern += sub_pattern;\n      }\n\n      group_n = add_len - group_n * sub_pattern.length;\n      pattern += sub_pattern.substr(0, group_n);\n    }\n\n    let uuid = pattern.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16;\n\n      if (d > 0) {\n        var r = (d + r) % 16 | 0;\n        d = Math.floor(d / 16);\n      } else {\n        var r = (d2 + r) % 16 | 0;\n        d2 = Math.floor(d2 / 16);\n      }\n\n      return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n    });\n    return uuid;\n  }\n\n  return {\n    getCommonParams,\n    getCommonParamsExtend,\n    generateSocketClient,\n    GenerateUUID\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uLi9Db0NyZWF0ZS1jb21wb25lbnRzL0NvQ3JlYXRlLXNvY2tldC1jbGllbnQvc3JjL2NvbW1vbi1mdW4uanM/OGNjYiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsIndpbmRvdyIsInNlbGYiLCJ3bmQiLCJnZXRDb21tb25QYXJhbXMiLCJjb25maWciLCJhcGlLZXkiLCJzZWN1cml0eUtleSIsIm9yZ2FuaXphdGlvbl9JZCIsImdldENvbW1vblBhcmFtc0V4dGVuZCIsImluZm8iLCJvcmdhbml6YXRpb25faWQiLCJnZW5lcmF0ZVNvY2tldENsaWVudCIsIm5hbWVzcGFjZSIsInJvb20iLCJucyIsInJyIiwiR2VuZXJhdGVVVUlEIiwibGVuZ3RoIiwiZCIsIkRhdGUiLCJnZXRUaW1lIiwiZDIiLCJwYXR0ZXJuIiwic3Vic3RyIiwiYWRkX2xlbiIsInN1Yl9wYXR0ZXJuIiwiZ3JvdXBfbiIsIk1hdGgiLCJmbG9vciIsImkiLCJ1dWlkIiwicmVwbGFjZSIsImMiLCJyIiwicmFuZG9tIiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiI7O0FBQUMsV0FBVUEsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDdEIsTUFBSSxJQUFKLEVBQWdEO0FBQzVDO0FBQ0FDLHFDQUFPLEVBQUQsbUNBQUssWUFBVztBQUNyQixhQUFPRCxPQUFPLENBQUNFLE1BQUQsQ0FBZDtBQUNBLEtBRks7QUFBQSxrR0FBTjtBQUdILEdBTEQsTUFLTyxFQVFSO0FBQ0YsQ0FmQSxFQWVDLE9BQU9DLElBQVAsS0FBZ0IsV0FBaEIsR0FBOEJBLElBQTlCLFNBZkQsRUFlNEMsVUFBVUMsR0FBVixFQUFlO0FBQzFELFdBQVNDLGVBQVQsR0FDQTtBQUNFLFFBQUlDLE1BQU0sR0FBRyxFQUFiOztBQUNBLFFBQUlGLEdBQUcsSUFBSUEsR0FBRyxDQUFDRSxNQUFmLEVBQXVCO0FBQ3JCQSxZQUFNLEdBQUdGLEdBQUcsQ0FBQ0UsTUFB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R00sSUFBSSxDQUFDQyxLQUFMLENBQVdQLEVBQUUsR0FBRyxFQUFoQixDQUFMO0FBQ0Q7O0FBQ0QsYUFBTyxDQUFDVyxDQUFDLElBQUksR0FBTCxHQUFXQyxDQUFYLEdBQWdCQSxDQUFDLEdBQUcsR0FBTCxHQUFZLEdBQTVCLEVBQWlDRSxRQUFqQyxDQUEwQyxFQUExQyxDQUFQO0FBQ0QsS0FWVSxDQUFYO0FBV0EsV0FBT0wsSUFBUDtBQUNEOztBQUVELFNBQU87QUFBQzNCLG1CQUFEO0FBQWtCSyx5QkFBbEI7QUFBeUNHLHdCQUF6QztBQUErREs7QUFBL0QsR0FBUDtBQUNELENBNUZBLENBQUQiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1zb2NrZXQtY2xpZW50L3NyYy9jb21tb24tZnVuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIFx0cmV0dXJuIGZhY3Rvcnkod2luZG93KVxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkobnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSh3aW5kb3cpO1xuICB9XG59KHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbiAod25kKSB7XG4gIGZ1bmN0aW9uIGdldENvbW1vblBhcmFtcygpIFxuICB7XG4gICAgbGV0IGNvbmZpZyA9IHt9O1xuICAgIGlmICh3bmQgJiYgd25kLmNvbmZpZykge1xuICAgICAgY29uZmlnID0gd25kLmNvbmZpZ1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgXCJhcGlLZXlcIjogICAgICAgICAgIGNvbmZpZy5hcGlLZXksXG4gICAgICBcInNlY3VyaXR5S2V5XCI6ICAgICAgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgICAgXCJvcmdhbml6YXRpb25faWRcIjogIGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBnZXRDb21tb25QYXJhbXNFeHRlbmQoaW5mbykgXG4gIHtcbiAgICBsZXQgY29uZmlnID0ge307XG4gICAgaWYgKHduZCAmJiB3bmQuY29uZmlnKSBjb25maWcgPSB3bmQuY29uZmlnXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIFwiYXBpS2V5XCI6ICAgICAgICAgICBpbmZvLmFwaUtleSB8fCBjb25maWcuYXBpS2V5LFxuICAgICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGluZm8uc2VjdXJpdHlLZXkgfHwgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgICAgXCJvcmdhbml6YXRpb25faWRcIjogIGluZm8ub3JnYW5pemF0aW9uX2lkIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBnZW5lcmF0ZVNvY2tldENsaWVudCAobmFtZXNwYWNlLCByb29tKSBcbiAge1xuICAgIGxldCBjb25maWcgPSB7fTtcbiAgICBpZiAod25kICYmIHduZC5jb25maWcpIGNvbmZpZyA9IHduZC5jb25maWdcbiAgICBcbiAgICBsZXQgbnMgPSBuYW1lc3BhY2UgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZFxuICAgIGxldCByciA9IHJvb20gfHwgJyc7XG4gICAgaWYgKHJyKSB7XG4gICAgICByZXR1cm4gYCR7bnN9LyR7cnJ9YFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnM7XG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBHZW5lcmF0ZVVVSUQobGVuZ3RoID0gMzYpIHtcbiAgICBsZXQgZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGxldCBkMiA9IDA7XG4gICAgbGV0IHBhdHRlcm4gPSBcInV4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiO1xuICBcbiAgICBpZiAobGVuZ3RoIDw9IHBhdHRlcm4ubGVuZ3RoKSB7XG4gICAgICBwYXR0ZXJuID0gcGF0dGVybi5zdWJzdHIoMCwgbGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGFkZF9sZW4gPSBsZW5ndGggLSBwYXR0ZXJuLmxlbmd0aDtcbiAgICAgIGxldCBzdWJfcGF0dGVybiA9IFwiLXh4eHl5eHh4XCI7XG4gIFxuICAgICAgbGV0IGdyb3VwX24gPSBNYXRoLmZsb29yKGFkZF9sZW4gLyBzdWJfcGF0dGVybi5sZW5ndGgpO1xuICBcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBfbjsgaSsrKSB7XG4gICAgICAgIHBhdHRlcm4gKz0gc3ViX3BhdHRlcm47XG4gICAgICB9XG4gIFxuICAgICAgZ3JvdXBfbiA9IGFkZF9sZW4gLSBncm91cF9uICogc3ViX3BhdHRlcm4ubGVuZ3RoO1xuICAgICAgcGF0dGVybiArPSBzdWJfcGF0dGVybi5zdWJzdHIoMCwgZ3JvdXBfbik7XG4gICAgfVxuICBcbiAgICBsZXQgdXVpZCA9IHBhdHRlcm4ucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTY7XG4gICAgICBpZiAoZCA+IDApIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIHIpICUgMTYgfCAwO1xuICAgICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHIgPSAoZDIgKyByKSAlIDE2IHwgMDtcbiAgICAgICAgZDIgPSBNYXRoLmZsb29yKGQyIC8gMTYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChjID09IFwieFwiID8gciA6IChyICYgMHg3KSB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiB1dWlkO1xuICB9XG4gIFxuICByZXR1cm4ge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudCwgR2VuZXJhdGVVVUlEfTtcbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-socket-client/src/common-fun.js\n')},"../../CoCreate-components/CoCreate-socket-client/src/index.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./common-fun.js */ \"../../CoCreate-components/CoCreate-socket-client/src/common-fun.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (commonFunc) {\n      return factory(commonFunc, window, WebSocket, Blob);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function (commonFunc, wnd, WebSocket, Blob) {\n  class CoCreateSocketClient {\n    constructor(prefix = \"crud\") {\n      this.prefix = prefix || \"crud\";\n      this.sockets = new Map();\n      this.listeners = new Map();\n      this.messageQueue = new Map();\n      this.saveFileName = '';\n      this.globalScope = \"\";\n    }\n\n    setGlobalScope(scope) {\n      this.globalScope = `${this.prefix}/${scope}`;\n    }\n\n    getGlobalScope() {\n      return this.globalScope;\n    }\n    /**\n     * config: {namespace, room, host}\n     */\n\n\n    create(config) {\n      const {\n        namespace,\n        room\n      } = config;\n      const key = this.getKey(namespace, room);\n\n      let _this = this;\n\n      if (namespace) {\n        this.setGlobalScope(namespace);\n      }\n\n      let socket;\n\n      if (this.sockets.get(key)) {\n        socket = this.sockets.get(key);\n        console.log('SOcket already has been register');\n        return;\n      }\n\n      let w_protocol = wnd.location.protocol;\n\n      if (wnd.location.protocol === \"about:\") {\n        w_protocol = wnd.parent.location.protocol;\n\n        if (!config.host) {\n          config.host = wnd.parent.location.host;\n        }\n      }\n\n      let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n      const port = config.port ? config.port : 8088;\n      let socket_url = `${protocol}://${wnd.location.host}:${port}/${key}`;\n\n      if (config.host) {\n        if (config.host.includes(\"://\")) {\n          socket_url = `${config.host}/${key}`;\n        } else {\n          if (config.host.includes(\":\")) {\n            socket_url = `${protocol}://${config.host}/${key}`;\n          } else {\n            socket_url = `${protocol}://${config.host}:${port}/${key}`;\n          }\n        }\n      }\n\n      try {\n        socket = new WebSocket(socket_url);\n      } catch (error) {\n        console.log(error);\n        return;\n      }\n\n      socket.onopen = function (event) {\n        const messages = _this.messageQueue.get(key) || [];\n        messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n        _this.sockets.set(key, socket);\n\n        _this.messageQueue.set(key, []);\n      };\n\n      socket.onclose = function (event) {\n        switch (event.code) {\n          case 1000:\n            // close normal\n            console.log(\"websocket: closed\");\n            break;\n\n          default:\n            _this.destroy(socket, key);\n\n            _this.reconnect(socket, config);\n\n            break;\n        }\n      };\n\n      socket.onerror = function (err) {\n        _this.destroy(socket, key);\n\n        _this.reconnect(socket, config);\n      };\n\n      socket.onmessage = function (data) {\n        try {\n          if (wnd.Blob) {\n            if (data.data instanceof Blob) {\n              _this.saveFile(data.data);\n\n              return;\n            }\n          }\n\n          let rev_data = JSON.parse(data.data);\n\n          if (rev_data.data.event) {\n            if (wnd.CustomEvent) {\n              var event = new wnd.CustomEvent(rev_data.data.event, {\n                detail: rev_data.data\n              });\n              wnd.document.dispatchEvent(event);\n              return;\n            } else {\n              process.emit(rev_data.data.event, rev_data.data);\n              return;\n            }\n          }\n\n          let action = rev_data.action;\n\n          const listeners = _this.listeners.get(rev_data.action);\n\n          if (!listeners) {\n            return;\n          }\n\n          listeners.forEach(listener => {\n            listener(rev_data.data, key);\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      };\n    }\n    /**\n     * \n     */\n\n\n    send(action, data, room) {\n      const obj = {\n        action: action,\n        data: { ...data,\n          uid: commonFunc.GenerateUUID()\n        }\n      };\n      const key = this.getKeyByRoom(room);\n      const socket = this.getByRoom(room);\n\n      if (socket) {\n        socket.send(JSON.stringify(obj));\n      } else {\n        if (this.messageQueue.get(key)) {\n          this.messageQueue.get(key).push(obj);\n        } else {\n          this.messageQueue.set(key, [obj]);\n        }\n      }\n    }\n\n    sendFile(file, room) {\n      const socket = this.getByRoom(room);\n\n      if (socket) {\n        socket.send(file);\n      }\n    }\n    /**\n     * scope: ns/room\n     */\n\n\n    listen(type, callback) {\n      if (!this.listeners.get(type)) {\n        this.listeners.set(type, [callback]);\n      } else {\n        this.listeners.get(type).push(callback);\n      }\n    }\n\n    reconnect(socket, config) {\n      let _this = this;\n\n      setTimeout(function () {\n        _this.create(config);\n      }, 1000);\n    }\n\n    destroy(socket, key) {\n      if (socket) {\n        socket.onerror = socket.onopen = socket.onclose = null;\n        socket.close();\n        socket = null;\n      }\n\n      if (this.sockets.get(key)) {\n        this.sockets.delete(key);\n      }\n    }\n\n    destroyByKey(key) {\n      let socket = this.sockets.get(key);\n\n      if (socket) {\n        this.destroy(socket, key);\n      }\n    }\n\n    getKey(namespace, room) {\n      let key = `${this.prefix}`;\n\n      if (namespace && namespace != '') {\n        if (room && room != '') {\n          key += `/${namespace}/${room}`;\n        } else {\n          key += `/${namespace}`;\n        }\n      }\n\n      return key;\n    }\n\n    getByRoom(room) {\n      let key = this.getKeyByRoom(room);\n      return this.sockets.get(key);\n    }\n\n    getKeyByRoom(room) {\n      let key = this.globalScope;\n\n      if (room) {\n        key = `${this.prefix}/${room}`;\n      }\n\n      return key;\n    }\n\n    saveFile(blob) {\n      if (wnd.document) {\n        const file_name = this.saveFileName || 'downloadFile';\n        var a = wnd.document.createElement(\"a\");\n        wnd.document.body.appendChild(a);\n        a.style = \"display: none\";\n        let url = window.URL.createObjectURL(blob);\n        a.href = url;\n        a.download = file_name;\n        a.click();\n        wnd.URL.revokeObjectURL(url);\n        this.saveFileName = '';\n      }\n    }\n\n    listenAsync(eventname) {\n      return new Promise((resolve, reject) => {\n        if (wnd.document) {\n          //. browser case\n          wnd.document.addEventListener(eventname, function (event) {\n            resolve(event.detail);\n          }, {\n            once: true\n          });\n        } else {\n          //. node case\n          process.once(eventname, data => {\n            resolve(data);\n          });\n        }\n      });\n    }\n\n  }\n\n  return CoCreateSocketClient;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-socket-client/src/index.js\n")},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _api = _interopRequireDefault(__webpack_require__(/*! @cocreate/api */ \"../../CoCreate-components/CoCreate-api/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateSendGrid = {\n  id: 'sendgrid',\n  actions: ['domainList', 'domainAuthenticate', 'sendDNSEmail', 'getSubUsersList', 'postSubUser', 'getMarketingContacts', 'postMarketingContact', 'getMarketingStats', 'getMarketingSinglesends', 'getEmailAddress', 'EmailValidation', 'sendEmail', 'domainValidate'],\n  render_domainList: function (data) {\n    console.log(data);\n  },\n  render_domainValidate: function (data) {\n    console.log(data);\n  },\n  render_domainAuthenticate: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    } //console.log(data);\n\n\n    data = {\n      data: data\n    };\n    console.log(\"DAta \", data);\n    CoCreate.api.render('sendgridDomainAuthenticate', data);\n  },\n  render_sendDNSEmail: function (data) {\n    console.log(data);\n  },\n  render_getSubUsersList: function (data) {\n    console.log(data);\n  },\n  render_getMarketingContacts: function (data) {\n    console.log(data);\n  },\n  render_postMarketingContact: function (data) {\n    console.log(data);\n  },\n  render_getMarketingStats: function (data) {\n    console.log(data);\n  },\n  render_getMarketingSinglesends: function (data) {\n    console.log(data);\n  },\n  render_getEmailAddress: function (data) {\n    console.log(data);\n  },\n  render_EmailValidation: function (data) {\n    console.log(data);\n  },\n  render_sendEmail: function (data) {\n    console.log(data);\n  }\n};\n\n_api.default.init({\n  name: CoCreateSendGrid.id,\n  module: CoCreateSendGrid\n});\n\nvar _default = CoCreateSendGrid;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sIm5hbWVzIjpbIkNvQ3JlYXRlU2VuZEdyaWQiLCJpZCIsImFjdGlvbnMiLCJyZW5kZXJfZG9tYWluTGlzdCIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwicmVuZGVyX2RvbWFpblZhbGlkYXRlIiwicmVuZGVyX2RvbWFpbkF1dGhlbnRpY2F0ZSIsIm9iamVjdCIsImFsZXJ0IiwiQ29DcmVhdGUiLCJhcGkiLCJyZW5kZXIiLCJyZW5kZXJfc2VuZEROU0VtYWlsIiwicmVuZGVyX2dldFN1YlVzZXJzTGlzdCIsInJlbmRlcl9nZXRNYXJrZXRpbmdDb250YWN0cyIsInJlbmRlcl9wb3N0TWFya2V0aW5nQ29udGFjdCIsInJlbmRlcl9nZXRNYXJrZXRpbmdTdGF0cyIsInJlbmRlcl9nZXRNYXJrZXRpbmdTaW5nbGVzZW5kcyIsInJlbmRlcl9nZXRFbWFpbEFkZHJlc3MiLCJyZW5kZXJfRW1haWxWYWxpZGF0aW9uIiwicmVuZGVyX3NlbmRFbWFpbCIsImluaXQiLCJuYW1lIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBRztBQUN4QkMsSUFBRSxFQUFFLFVBRG9CO0FBRXhCQyxTQUFPLEVBQUUsQ0FDUixZQURRLEVBRVIsb0JBRlEsRUFHUixjQUhRLEVBSVIsaUJBSlEsRUFLUixhQUxRLEVBTVIsc0JBTlEsRUFPUixzQkFQUSxFQVFSLG1CQVJRLEVBU1IseUJBVFEsRUFVUixpQkFWUSxFQVdSLGlCQVhRLEVBWVIsV0FaUSxFQWFSLGdCQWJRLENBRmU7QUFrQnhCQyxtQkFBaUIsRUFBRSxVQUFVQyxJQUFWLEVBQWdCO0FBQ2xDQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLEdBcEJ1QjtBQXNCeEJHLHVCQUFxQixFQUFFLFVBQVVILElBQVYsRUFBZ0I7QUFDdENDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0EsR0F4QnVCO0FBeUJ4QkksMkJBQXlCLEVBQUUsVUFBVUosSUFBVixFQUFnQjtBQUMxQyxRQUFJQSxJQUFJLENBQUNLLE1BQUwsSUFBZSxPQUFuQixFQUE0QjtBQUNsQkMsV0FBSyxDQUFDTixJQUFJLENBQUNBLElBQU4sQ0FBTDtBQUNILEtBSG1DLENBSTFDOzs7QUFDQUEsUUFBSSxHQUFHO0FBQUNBLFVBQUksRUFBRUE7QUFBUCxLQUFQO0FBQ0dDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBb0JGLElBQXBCO0FBQ0FPLFlBQVEsQ0FBQ0MsR0FBVCxDQUFhQyxNQUFiLENBQW9CLDRCQUFwQixFQUFrRFQsSUFBbEQ7QUFDSCxHQWpDdUI7QUFtQ3hCVSxxQkFBbUIsRUFBRSxVQUFVVixJQUFWLEVBQWdCO0FBQ3BDQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLEdBckN1QjtBQXVDeEJXLHdCQUFzQixFQUFFLFVBQVVYLElBQVYsRUFBZ0I7QUFDdkNDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0EsR0F6Q3VCO0FBMkN4QlksNkJBQTJCLEVBQUUsVUFBVVosSUFBVixFQUFnQjtBQUM1Q0MsV0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDQSxHQTdDdUI7QUErQ3hCYSw2QkFBMkIsRUFBRSxVQUFVYixJQUFWLEVBQWdCO0FBQzVDQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLEdBakR1QjtBQW1EeEJjLDBCQUF3QixFQUFFLFVBQVVkLElBQVYsRUFBZ0I7QUFDekNDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0EsR0FyRHVCO0FBdUR4QmUsZ0NBQThCLEVBQUUsVUFBVWYsSUFBVixFQUFnQjtBQUMvQ0MsV0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDQSxHQXpEdUI7QUEyRHhCZ0Isd0JBQXNCLEVBQUUsVUFBVWhCLElBQVYsRUFBZ0I7QUFDdkNDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0EsR0E3RHVCO0FBK0R4QmlCLHdCQUFzQixFQUFFLFVBQVVqQixJQUFWLEVBQWdCO0FBQ3ZDQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLEdBakV1QjtBQW1FeEJrQixrQkFBZ0IsRUFBRyxVQUFVbEIsSUFBVixFQUFnQjtBQUNsQ0MsV0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDQTtBQXJFdUIsQ0FBekI7O0FBd0VBUSxhQUFJVyxJQUFKLENBQVM7QUFDUkMsTUFBSSxFQUFFeEIsZ0JBQWdCLENBQUNDLEVBRGY7QUFFUndCLFFBQU0sRUFBRXpCO0FBRkEsQ0FBVDs7ZUFLZUEsZ0IiLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gJ0Bjb2NyZWF0ZS9hcGknXG5cbmNvbnN0IENvQ3JlYXRlU2VuZEdyaWQgPSB7XG5cdGlkOiAnc2VuZGdyaWQnLFxuXHRhY3Rpb25zOiBbXG5cdFx0J2RvbWFpbkxpc3QnLFxuXHRcdCdkb21haW5BdXRoZW50aWNhdGUnLFxuXHRcdCdzZW5kRE5TRW1haWwnLFxuXHRcdCdnZXRTdWJVc2Vyc0xpc3QnLFxuXHRcdCdwb3N0U3ViVXNlcicsXG5cdFx0J2dldE1hcmtldGluZ0NvbnRhY3RzJyxcblx0XHQncG9zdE1hcmtldGluZ0NvbnRhY3QnLFxuXHRcdCdnZXRNYXJrZXRpbmdTdGF0cycsXG5cdFx0J2dldE1hcmtldGluZ1NpbmdsZXNlbmRzJyxcblx0XHQnZ2V0RW1haWxBZGRyZXNzJyxcblx0XHQnRW1haWxWYWxpZGF0aW9uJyxcblx0XHQnc2VuZEVtYWlsJyxcblx0XHQnZG9tYWluVmFsaWRhdGUnXG5cdF0sXG5cblx0cmVuZGVyX2RvbWFpbkxpc3Q6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdH0sXG5cblx0cmVuZGVyX2RvbWFpblZhbGlkYXRlOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxuXHRyZW5kZXJfZG9tYWluQXV0aGVudGljYXRlOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuXHRcdC8vY29uc29sZS5sb2coZGF0YSk7XG5cdFx0ZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICBcdGNvbnNvbGUubG9nKFwiREF0YSBcIixkYXRhKVxuICAgIFx0Q29DcmVhdGUuYXBpLnJlbmRlcignc2VuZGdyaWREb21haW5BdXRoZW50aWNhdGUnLCBkYXRhKTtcdFxuXHR9LFxuXG5cdHJlbmRlcl9zZW5kRE5TRW1haWw6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdH0sXG5cblx0cmVuZGVyX2dldFN1YlVzZXJzTGlzdDogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0fSxcblxuXHRyZW5kZXJfZ2V0TWFya2V0aW5nQ29udGFjdHM6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdH0sXG5cdFxuXHRyZW5kZXJfcG9zdE1hcmtldGluZ0NvbnRhY3Q6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdH0sXG5cdFxuXHRyZW5kZXJfZ2V0TWFya2V0aW5nU3RhdHM6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdH0sXG5cdFxuXHRyZW5kZXJfZ2V0TWFya2V0aW5nU2luZ2xlc2VuZHM6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdH0sXG5cdFxuXHRyZW5kZXJfZ2V0RW1haWxBZGRyZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxuXHRcblx0cmVuZGVyX0VtYWlsVmFsaWRhdGlvbjogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0fSxcblx0XG5cdHJlbmRlcl9zZW5kRW1haWwgOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxufVxuXG5hcGkuaW5pdCh7XG5cdG5hbWU6IENvQ3JlYXRlU2VuZEdyaWQuaWQsIFxuXHRtb2R1bGU6XHRDb0NyZWF0ZVNlbmRHcmlkXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ29DcmVhdGVTZW5kR3JpZDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));