/*! For license information please see CoCreate-sendgrid.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.sendgrid=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../../CoCreate-components/CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const actionName = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[actionName];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    } else {\n      let status = this.__runSpecialAction(actionName, data);\n\n      if (status === \"next\") {\n        this.__moveNextAction();\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.__moveNextAction(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {// CoCreate.logic.setLinkProcess(aTag)\n    }\n  },\n  //. special action\n  __runSpecialAction: function (actionName, data) {\n    let matches = /(\\w+)\\{([a-zA-Z0-9_ \\-#$.]+)\\}/gm.exec(actionName);\n\n    if (!matches || matches.length < 3) {\n      return \"next\";\n    }\n\n    let type = matches[1],\n        param = matches[2].trim();\n    if (!param) return \"next\";\n    const self = this;\n\n    switch (type) {\n      case 'event':\n        console.log(\"Waiting Event....\");\n        document.addEventListener(param, eventData => {\n          console.log('Event Action (Received event from other section) ====== ' + param);\n\n          self.__moveNextAction(eventData);\n        }, {\n          once: true\n        });\n        break;\n\n      case 'timeout':\n        let delayTime = parseInt(param);\n\n        if (delayTime > 0) {\n          setTimeout(function () {\n            console.log(\"Timeout ======= \" + param);\n\n            self.__moveNextAction(data);\n          }, parseInt(param));\n        }\n\n        break;\n\n      case 'action':\n        let btn = document.querySelector(param);\n\n        if (btn) {\n          btn.click();\n        }\n\n        break;\n\n      default:\n        return \"next\";\n    }\n  },\n  __moveNextAction: function (data) {\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-action/src/index.js\n")},"../../CoCreate-components/CoCreate-api/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = __webpack_require__(/*! ../../../CoCreateJS/src */ "../../CoCreateJS/src/index.js");\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ "../../CoCreate-components/CoCreate-action/src/index.js"));\n\nvar _render = _interopRequireDefault(__webpack_require__(/*! @cocreate/render */ "../../CoCreate-components/CoCreate-render/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n\n      _src.socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _action.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n\n    _src.socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _render.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      _src.socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n\n      _src.socketApi.setGlobalScope(namespace);\n    } else {\n      _src.socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\nCoCreateApi.createApiSocket(window.config.host ? window.config.host : \'server.cocreate.app\', window.config.organization_Id // window.config.apiKey\n// window.config.securityKey\n);\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-api/src/index.js\n')},"../../CoCreate-components/CoCreate-crud/src/common-fun.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCommonParams = getCommonParams;\nexports.getCommonParamsExtend = getCommonParamsExtend;\nexports.generateSocketClient = generateSocketClient;\n\nfunction getCommonParams() {\n  return {\n    "apiKey": config.apiKey,\n    "securityKey": config.securityKey,\n    "organization_id": config.organization_Id\n  };\n}\n\nfunction getCommonParamsExtend(info) {\n  return {\n    "apiKey": info.apiKey || config.apiKey,\n    "securityKey": info.securityKey || config.securityKey,\n    "organization_id": info.organization_id || config.organization_Id\n  };\n}\n\nfunction generateSocketClient(namespace, room) {\n  let ns = namespace || config.organization_Id;\n  let rr = room || \'\';\n\n  if (rr) {\n    return `${ns}/${rr}`;\n  } else {\n    return ns;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uLi9Db0NyZWF0ZS1jb21wb25lbnRzL0NvQ3JlYXRlLWNydWQvc3JjL2NvbW1vbi1mdW4uanM/NWQ4ZSJdLCJuYW1lcyI6WyJnZXRDb21tb25QYXJhbXMiLCJjb25maWciLCJhcGlLZXkiLCJzZWN1cml0eUtleSIsIm9yZ2FuaXphdGlvbl9JZCIsImdldENvbW1vblBhcmFtc0V4dGVuZCIsImluZm8iLCJvcmdhbml6YXRpb25faWQiLCJnZW5lcmF0ZVNvY2tldENsaWVudCIsIm5hbWVzcGFjZSIsInJvb20iLCJucyIsInJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxTQUFTQSxlQUFULEdBQ0E7QUFDRSxTQUFPO0FBQ0wsY0FBb0JDLE1BQU0sQ0FBQ0MsTUFEdEI7QUFFTCxtQkFBb0JELE1BQU0sQ0FBQ0UsV0FGdEI7QUFHTCx1QkFBb0JGLE1BQU0sQ0FBQ0c7QUFIdEIsR0FBUDtBQUtEOztBQUVELFNBQVNDLHFCQUFULENBQStCQyxJQUEvQixFQUNBO0FBQ0UsU0FBTztBQUNMLGNBQW9CQSxJQUFJLENBQUNKLE1BQUwsSUFBZUQsTUFBTSxDQUFDQyxNQURyQztBQUVMLG1CQUFvQkksSUFBSSxDQUFDSCxXQUFMLElBQW9CRixNQUFNLENBQUNFLFdBRjFDO0FBR0wsdUJBQW9CRyxJQUFJLENBQUNDLGVBQUwsSUFBd0JOLE1BQU0sQ0FBQ0c7QUFIOUMsR0FBUDtBQUtEOztBQUVELFNBQVNJLG9CQUFULENBQStCQyxTQUEvQixFQUEwQ0MsSUFBMUMsRUFDQTtBQUNFLE1BQUlDLEVBQUUsR0FBR0YsU0FBUyxJQUFJUixNQUFNLENBQUNHLGVBQTdCO0FBQ0EsTUFBSVEsRUFBRSxHQUFHRixJQUFJLElBQUksRUFBakI7O0FBQ0EsTUFBSUUsRUFBSixFQUFRO0FBQ04sV0FBUSxHQUFFRCxFQUFHLElBQUdDLEVBQUcsRUFBbkI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPRCxFQUFQO0FBQ0Q7QUFDRiIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZS1jb21wb25lbnRzL0NvQ3JlYXRlLWNydWQvc3JjL2NvbW1vbi1mdW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRDb21tb25QYXJhbXMoKSBcbntcbiAgcmV0dXJuIHtcbiAgICBcImFwaUtleVwiOiAgICAgICAgICAgY29uZmlnLmFwaUtleSxcbiAgICBcInNlY3VyaXR5S2V5XCI6ICAgICAgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbW1vblBhcmFtc0V4dGVuZChpbmZvKSBcbntcbiAgcmV0dXJuIHtcbiAgICBcImFwaUtleVwiOiAgICAgICAgICAgaW5mby5hcGlLZXkgfHwgY29uZmlnLmFwaUtleSxcbiAgICBcInNlY3VyaXR5S2V5XCI6ICAgICAgaW5mby5zZWN1cml0eUtleSB8fCBjb25maWcuc2VjdXJpdHlLZXksXG4gICAgXCJvcmdhbml6YXRpb25faWRcIjogIGluZm8ub3JnYW5pemF0aW9uX2lkIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTb2NrZXRDbGllbnQgKG5hbWVzcGFjZSwgcm9vbSkgXG57XG4gIGxldCBucyA9IG5hbWVzcGFjZSB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkXG4gIGxldCByciA9IHJvb20gfHwgJyc7XG4gIGlmIChycikge1xuICAgIHJldHVybiBgJHtuc30vJHtycn1gXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5zO1xuICB9XG59XG5cbmV4cG9ydCB7Z2V0Q29tbW9uUGFyYW1zLCBnZXRDb21tb25QYXJhbXNFeHRlbmQsIGdlbmVyYXRlU29ja2V0Q2xpZW50fTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud/src/common-fun.js\n')},"../../CoCreate-components/CoCreate-crud/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = CRUD;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreate-components/CoCreate-crud/src/common-fun.js\");\n\nvar _utilsCrud = _interopRequireDefault(__webpack_require__(/*! ./utils.crud.js */ \"../../CoCreate-components/CoCreate-crud/src/utils.crud.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// var data = {\n//   \"org_id\": \"xxx\",\n//   \"customer.name\": \"Jin\",\n//   \"customer.fristname\": \"Jin\",\n//   \"customer.lastname\": \"CF\",\n//   \"customer.address.line1\": \"line1\",\n//   \"customer.address.line2\": \"line2\",\n//   'scope[0]': 'testing',\n//   'scope[1]': '---',\n//   \"customer.orders[0]\": 123,\n//   \"customer.orders[1]\": 243,\n// }\n// var obj = {\n//   test: {\n//     \"name\": '123',\n//     \"address\": 'address',\n//     \"customer\": {\n//       \"name\": 'tttt'\n//     },\n//     \"orders\": [1,2,3]\n//   }\n// }\n// console.log('----- convert object -----')\n// console.log(utilsCrud.decodeObject(data));\n// console.log(utilsCrud.encodeObject(obj));\nconst CoCreateCRUD = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n   \n    CoCreate.crud.readDcoumentList {\n      collection: \"modules\",\n      element: \"xxxx\",\n      metadata: \"\",\n      operator: {\n        fetch: {\n          name: 'xxxx',\n          value: 'xxxxx'\n        },\n        filters: [{\n          name: 'field1',\n          operator: \"contain | range | eq | ne | lt | lte | gt | gte | in | nin\",\n          value: [v1, v2, ...]\n        }, {\n          name: \"_id\",\n          opreator: \"in\",\n          value: [\"id1\"]\n        }, {\n          ....\n        }],\n        orders: [{\n          name: 'field-x',\n          type: 1 | -1\n        }],\n        search: {\n          type: 'or | and',\n          value: [value1, value2]\n        },\n        \n        startIndex: 0 (integer),\n        count: 0 (integer)\n      },\n      \n      is_collection: true | false,\n      //. case fetch document case\n      created_ids : [id1, id2, ...],\n      \n      \n      -------- additional response data -----------\n      data: [] // array\n    }\n  */\n  readDocumentList(info) {\n    if (!info) return;\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!info.collection || !info.operator) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...info\n    };\n    this.socket.send('readDocumentList', request_data);\n  },\n\n  /*\n  CoCreate.crud.createDocument({\n    namespace:'',\n    room:'',\n    broadcast: true/false, (default=ture)\n    broadcast_sender: true/false, (default=true) \n    \n    collection: \"test123\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  // data param needs organization_id field added to pass security check\n  createDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParamsExtend)(info);\n    let request_data = { ...info,\n      ...commonData\n    };\n    let data = info.data || {};\n\n    if (!data['organization_id']) {\n      data['organization_id'] = config.organization_Id;\n    }\n\n    if (info['data']) {\n      data = { ...data,\n        ...info['data']\n      };\n    } //. rebuild data\n\n\n    request_data['data'] = data;\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('createDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.updateDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"test123\",\n    document_id: \"document_id\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    delete_fields:[\"name3\", \"name4\"],\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  updateDocument: function (info) {\n    if (!info || !info['document_id']) return;\n    let commonData = (0, _commonFun.getCommonParamsExtend)(info);\n    let request_data = { ...info,\n      ...commonData\n    };\n\n    if (typeof info['data'] === 'object') {\n      request_data['set'] = info['data'];\n    }\n\n    if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n    if (!request_data['set'] && !request_data['unset']) return;\n\n    if (info.broadcast === false) {\n      request_data['broadcast'] = false;\n    }\n    /** socket parameters **/\n\n\n    if (info['broadcast_sender'] === undefined) {\n      request_data['broadcast_sender'] = true;\n    }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('updateDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.readDocument({\n    collection: \"test123\",\n    document_id: \"document_id\",\n    element: “xxxx”,\n    metaData: \"xxxx\",\n    exclude_fields: [] \n  }),\n  */\n  readDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParams)();\n    let request_data = { ...info,\n      ...commonData\n    };\n    this.socket.send('readDocument', request_data);\n  },\n\n  /*\n  CoCreate.crud.deleteDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"module\",\n    document_id: \"\",\n    element: “xxxx”,\n    metadata: \"xxxx\"\n  }),\n  */\n  deleteDocument: function (info) {\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParams)();\n    let request_data = { ...info,\n      ...commonData\n    };\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('deleteDocument', request_data, room);\n  },\n\n  /** export / import db functions **/\n\n  /*\n  readDocument({\n   collection: \"test123\",\n   element: “xxxx”,\n   metaData: \"xxxx\",\n  }),\n  */\n  exportCollection: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['export_type'] = info['export_type'];\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('exportDB', request_data);\n  },\n\n  /*\n  readDocument({\n    collection: \"test123\",\n    file: file\n  }),\n  */\n  importCollection: function (info) {\n    const {\n      file\n    } = info;\n\n    if (info === null || !(file instanceof File)) {\n      return;\n    }\n\n    const extension = file.name.split(\".\").pop();\n\n    if (!['json', 'csv'].some(item => item === extension)) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['import_type'] = extension;\n    this.socket.send('importDB', request_data);\n    this.socket.sendFile(file);\n  },\n  //. message listener\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  listenerReadDocument: function (fun) {\n    this.socket.listen(\"readDocument\", fun);\n  },\n  listenerCreateDocument: function (fun) {\n    this.socket.listen(\"createDocument\", fun);\n  },\n  listenerDeleteDocument: function (fun) {\n    this.socket.listen(\"deleteDocument\", fun);\n  },\n  listenerUpdateDocument: function (fun) {\n    this.socket.listen(\"updateDocument\", fun);\n  },\n  listenerReadDocumentList: function (fun) {\n    this.socket.listen(\"readDocumentList\", fun);\n  }\n};\n\nfunction CRUD(socket) {\n  CoCreateCRUD.setSocket(socket);\n  return CoCreateCRUD;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud/src/index.js\n")},"../../CoCreate-components/CoCreate-crud/src/utils.crud.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction __mergeObject(target, source) {\n  target = target || {};\n\n  for (let key of Object.keys(source)) {\n    if (source[key] instanceof Object) {\n      Object.assign(source[key], __mergeObject(target[key], source[key]));\n    }\n  }\n\n  Object.assign(target || {}, source);\n  return target;\n}\n\nfunction __createObject(data, path) {\n  if (!path) return data;\n  let keys = path.split('.');\n  let newObject = data;\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    newObject = {\n      [keys[i]]: newObject\n    };\n  }\n\n  return newObject;\n}\n\nfunction __createArray(key, data) {\n  try {\n    let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key);\n\n    if (item && item.length == 3) {\n      let arrayKey = item[1];\n      let index = parseInt(item[2]);\n\n      if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n        data[arrayKey] = [];\n      }\n\n      data[arrayKey][index] = data[key];\n      delete data[key];\n      key = arrayKey;\n    }\n  } catch {\n    console.log('create array error');\n  }\n\n  return key;\n}\n\nfunction isObject(item) {\n  return !!item && item.constructor === Object;\n}\n\nfunction isArray(item) {\n  return !!item && item.constructor === Array;\n}\n\nfunction decodeObject(data) {\n  let keys = Object.keys(data);\n  let objectData = {};\n  keys.forEach(k => {\n    k = __createArray(k, data);\n\n    if (k.split('.').length > 1) {\n      let newData = __createObject(data[k], k);\n\n      delete data[k];\n      objectData = __mergeObject(objectData, newData);\n    } else {\n      objectData[k] = data[k];\n    }\n  });\n  return objectData;\n}\n\nfunction encodeObject(data) {\n  let keys = Object.keys(data);\n  let newData = {};\n  keys.forEach(k => {\n    let data_value = data[k];\n\n    if (isObject(data[k])) {\n      let new_obj = encodeObject(data[k]);\n      let newKeys = Object.keys(new_obj);\n      newKeys.forEach(newKey => {\n        let value = new_obj[newKey];\n        newKey = k + \".\" + newKey;\n        newData[newKey] = value;\n      });\n    } else if (isArray(data_value)) {\n      data_value.forEach((v, index) => {\n        newData[`${k}[${index}]`] = v;\n      });\n    } else {\n      newData[k] = data[k];\n    }\n  });\n  return newData;\n}\n\nvar _default = {\n  decodeObject,\n  encodeObject\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uLi9Db0NyZWF0ZS1jb21wb25lbnRzL0NvQ3JlYXRlLWNydWQvc3JjL3V0aWxzLmNydWQuanM/OGU1NSJdLCJuYW1lcyI6WyJfX21lcmdlT2JqZWN0IiwidGFyZ2V0Iiwic291cmNlIiwia2V5IiwiT2JqZWN0Iiwia2V5cyIsImFzc2lnbiIsIl9fY3JlYXRlT2JqZWN0IiwiZGF0YSIsInBhdGgiLCJzcGxpdCIsIm5ld09iamVjdCIsImkiLCJsZW5ndGgiLCJfX2NyZWF0ZUFycmF5IiwiaXRlbSIsImV4ZWMiLCJhcnJheUtleSIsImluZGV4IiwicGFyc2VJbnQiLCJBcnJheSIsImlzQXJyYXkiLCJjb25zb2xlIiwibG9nIiwiaXNPYmplY3QiLCJjb25zdHJ1Y3RvciIsImRlY29kZU9iamVjdCIsIm9iamVjdERhdGEiLCJmb3JFYWNoIiwiayIsIm5ld0RhdGEiLCJlbmNvZGVPYmplY3QiLCJkYXRhX3ZhbHVlIiwibmV3X29iaiIsIm5ld0tleXMiLCJuZXdLZXkiLCJ2YWx1ZSIsInYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFVQSxhQUFWLENBQXdCQyxNQUF4QixFQUFnQ0MsTUFBaEMsRUFDQTtBQUNDRCxRQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFuQjs7QUFDQSxPQUFLLElBQUlFLEdBQVQsSUFBZ0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxNQUFaLENBQWhCLEVBQXFDO0FBQ3BDLFFBQUlBLE1BQU0sQ0FBQ0MsR0FBRCxDQUFOLFlBQXVCQyxNQUEzQixFQUFtQztBQUNsQ0EsWUFBTSxDQUFDRSxNQUFQLENBQWNKLE1BQU0sQ0FBQ0MsR0FBRCxDQUFwQixFQUEyQkgsYUFBYSxDQUFDQyxNQUFNLENBQUNFLEdBQUQsQ0FBUCxFQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEIsQ0FBeEM7QUFDQTtBQUNEOztBQUVEQyxRQUFNLENBQUNFLE1BQVAsQ0FBY0wsTUFBTSxJQUFJLEVBQXhCLEVBQTRCQyxN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LWNydWQvc3JjL3V0aWxzLmNydWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBcdF9fbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UpIFxue1xuXHR0YXJnZXQgPSB0YXJnZXQgfHwge307XG5cdGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhzb3VyY2UpKSB7XG5cdFx0aWYgKHNvdXJjZVtrZXldIGluc3RhbmNlb2YgT2JqZWN0KSB7XG5cdFx0XHRPYmplY3QuYXNzaWduKHNvdXJjZVtrZXldLCBfX21lcmdlT2JqZWN0KHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSkpXG5cdFx0fVxuXHR9XG5cdFxuXHRPYmplY3QuYXNzaWduKHRhcmdldCB8fCB7fSwgc291cmNlKVxuXHRyZXR1cm4gdGFyZ2V0XG59XG5cbmZ1bmN0aW9uIF9fY3JlYXRlT2JqZWN0KGRhdGEsIHBhdGgpIFxue1xuXHRpZiAoIXBhdGgpIHJldHVybiBkYXRhO1xuXHRcblx0bGV0IGtleXMgPSBwYXRoLnNwbGl0KCcuJylcblx0bGV0IG5ld09iamVjdCA9IGRhdGE7XG5cblx0Zm9yICh2YXIgIGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0bmV3T2JqZWN0ID0ge1trZXlzW2ldXTogbmV3T2JqZWN0fVx0XHRcdFx0XG5cdH1cblx0cmV0dXJuIG5ld09iamVjdDtcbn1cblxuZnVuY3Rpb24gX19jcmVhdGVBcnJheShrZXksIGRhdGEpXG57XG4gIHRyeSB7XG4gICAgbGV0IGl0ZW0gPSAvKFtcXHdcXFddKylcXFsoXFxkKylcXF0vZ20uZXhlYyhrZXkpXG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGggPT0gMykge1xuICAgICAgbGV0IGFycmF5S2V5ID0gaXRlbVsxXTtcbiAgICAgIGxldCBpbmRleCA9IHBhcnNlSW50KGl0ZW1bMl0pO1xuICAgICAgXG4gICAgICBpZiAoIWRhdGFbYXJyYXlLZXldIHx8ICFBcnJheS5pc0FycmF5KGRhdGFbYXJyYXlLZXldKSkge1xuICAgICAgICBkYXRhW2FycmF5S2V5XSA9IFtdO1xuICAgICAgfSBcbiAgICAgIGRhdGFbYXJyYXlLZXldW2luZGV4XSA9IGRhdGFba2V5XTtcbiAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICBrZXkgPSBhcnJheUtleTtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIGNvbnNvbGUubG9nKCdjcmVhdGUgYXJyYXkgZXJyb3InKTtcbiAgfVxuICByZXR1cm4ga2V5O1xufVxuXG5cblxuZnVuY3Rpb24gaXNPYmplY3QoaXRlbSkge1xuICByZXR1cm4gKCEhaXRlbSkgJiYgKGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdCk7XG59XG5mdW5jdGlvbiBpc0FycmF5KGl0ZW0pIHtcbiAgcmV0dXJuICghIWl0ZW0pICYmIChpdGVtLmNvbnN0cnVjdG9yID09PSBBcnJheSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZU9iamVjdChkYXRhKSB7XG4gIGxldCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSlcbiAgbGV0IG9iamVjdERhdGEgPSB7fTtcbiAgXG4gIGtleXMuZm9yRWFjaCgoaykgPT4ge1xuICAgIGsgPSBfX2NyZWF0ZUFycmF5KGssIGRhdGEpO1xuICAgIGlmIChrLnNwbGl0KCcuJykubGVuZ3RoID4gMSkge1xuICAgICAgbGV0IG5ld0RhdGEgPSBfX2NyZWF0ZU9iamVjdChkYXRhW2tdLCBrKTtcbiAgICAgIGRlbGV0ZSBkYXRhW2tdO1xuICAgICAgXG4gICAgICBvYmplY3REYXRhID0gX19tZXJnZU9iamVjdChvYmplY3REYXRhLCBuZXdEYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0RGF0YVtrXSA9IGRhdGFba107XG4gICAgfVxuICB9KVxuICByZXR1cm4gb2JqZWN0RGF0YTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlT2JqZWN0KGRhdGEpIHtcbiAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgbGV0IG5ld0RhdGEgPSB7fTtcbiAga2V5cy5mb3JFYWNoKChrKSA9PiB7XG4gICAgbGV0IGRhdGFfdmFsdWUgPSBkYXRhW2tdO1xuICAgIGlmIChpc09iamVjdChkYXRhW2tdKSkge1xuICAgICAgbGV0IG5ld19vYmogPSBlbmNvZGVPYmplY3QoZGF0YVtrXSk7XG4gICAgICBcbiAgICAgIGxldCBuZXdLZXlzID0gT2JqZWN0LmtleXMobmV3X29iaik7XG4gICAgICBuZXdLZXlzLmZvckVhY2goKG5ld0tleSkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBuZXdfb2JqW25ld0tleV07XG4gICAgICAgIG5ld0tleSA9IGsgKyBcIi5cIiArIG5ld0tleTtcbiAgICAgICAgbmV3RGF0YVtuZXdLZXldID0gdmFsdWU7XG4gICAgICB9KVxuICAgICAgXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGFfdmFsdWUpKXtcbiAgICAgIGRhdGFfdmFsdWUuZm9yRWFjaCgodiwgaW5kZXgpID0+IHtcbiAgICAgICAgbmV3RGF0YVtgJHtrfVske2luZGV4fV1gXSA9IHY7XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdEYXRhW2tdID0gZGF0YVtrXTtcbiAgICB9XG4gIH0pXG4gIHJldHVybiBuZXdEYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRlY29kZU9iamVjdCxcbiAgZW5jb2RlT2JqZWN0XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud/src/utils.crud.js\n")},"../../CoCreate-components/CoCreate-render/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * change name Class\n * add functionality to add value on any attr of each elements into template\n */\nconst CoCreateRender = {\n  __getValueFromObject: function (json, path) {\n    try {\n      if (typeof json == 'undefined' || !path) return false;\n      let jsonData = json,\n          subpath = path.split('.');\n\n      for (let i = 0; i < subpath.length; i++) {\n        jsonData = jsonData[subpath[i]];\n        if (!jsonData) return false;\n      }\n\n      return jsonData;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __getValue: function (data, attrValue) {\n    let result = /{{\\s*([\\w\\W]+)\\s*}}/g.exec(attrValue);\n\n    if (result) {\n      return this.__getValueFromObject(data, result[1].trim());\n    }\n\n    return false;\n  },\n  __createObject: function (data, path) {\n    try {\n      if (!path) return data;\n      let keys = path.split('.');\n      let newObject = data;\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        newObject = {\n          [keys[i]]: newObject\n        };\n      }\n\n      return newObject;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __replaceValue: function (data, inputValue) {\n    let isPass = false;\n    let self = this;\n    let resultValue = null; // let variables = inputValue.match(/{{\\s*(\\S+)\\s*}}/g);\n\n    let variables = inputValue.match(/{{([A-Za-z0-9_.,\\- ]*)}}/g);\n\n    if (variables) {\n      variables.forEach(attr => {\n        let value = self.__getValue(data, attr);\n\n        if (value && typeof value !== \"object\") {\n          isPass = true;\n          inputValue = inputValue.replace(attr, value);\n        }\n      });\n\n      if (isPass) {\n        resultValue = inputValue;\n      }\n    }\n\n    return resultValue;\n  },\n  setArray: function (template, data) {\n    const type = template.getAttribute('data-render_array') || \"data\";\n    const render_key = template.getAttribute('data-render_key') || type;\n    const self = this;\n\n    const arrayData = this.__getValueFromObject(data, type);\n\n    if (type && Array.isArray(arrayData)) {\n      arrayData.forEach((item, index) => {\n        let cloneEl = template.cloneNode(true);\n        cloneEl.classList.remove('template');\n        cloneEl.classList.add('clone_' + type);\n\n        if (typeof item !== 'object') {\n          item = {\n            \"--\": item\n          };\n        } else {\n          item['index'] = index;\n        }\n\n        let r_data = self.__createObject(item, render_key);\n\n        self.setValue([cloneEl], r_data);\n        template.insertAdjacentHTML('beforebegin', cloneEl.outerHTML);\n      });\n    }\n  },\n  setValue: function (els, data, passTo, template) {\n    if (!data) return;\n    const that = this;\n    Array.from(els).forEach(e => {\n      let passId = e.getAttribute('data-pass_id');\n\n      if (passTo && passId != passTo) {\n        return;\n      }\n\n      Array.from(e.attributes).forEach(attr => {\n        let attr_name = attr.name.toLowerCase();\n        let isPass = false;\n        let attrValue = attr.value;\n        attrValue = that.__replaceValue(data, attrValue);\n\n        if (attrValue) {\n          if (attr_name == 'value') {\n            let tag = e.tagName.toLowerCase();\n\n            switch (tag) {\n              case 'input':\n                e.setAttribute(attr_name, attrValue);\n                break;\n\n              case 'textarea':\n                e.setAttribute(attr_name, attrValue);\n                e.textContent = attrValue;\n                break;\n\n              default:\n                if (e.children.length === 0) {\n                  e.innerHTML = attrValue;\n                }\n\n            }\n          }\n\n          e.setAttribute(attr_name, attrValue);\n        }\n      });\n\n      if (e.children.length == 0 && e.textContent) {\n        let textContent = e.textContent;\n        textContent = that.__replaceValue(data, textContent);\n\n        if (textContent) {\n          e.textContent = textContent;\n        }\n      }\n\n      if (e.children.length > 0) {\n        that.setValue(e.children, data);\n\n        if (e.classList.contains('template')) {\n          that.setArray(e, data);\n        }\n      }\n    });\n  },\n  data: function ({\n    selector,\n    data,\n    elements,\n    passTo\n  }) {\n    if (selector) {\n      this.render(selector, data);\n    } else if (elements) {\n      this.setValue(elements, data, passTo);\n    }\n  },\n  render: function (selector, dataResult) {\n    let template_div = document.querySelector(selector);\n\n    if (!template_div) {\n      return;\n    }\n\n    if (Array.isArray(dataResult)) {\n      template_div.setAttribute('data-render_array', 'test');\n      this.setValue([template_div], {\n        test: dataResult\n      });\n    } else {\n      this.setValue(template_div.children, dataResult);\n    }\n  }\n};\nvar _default = CoCreateRender;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uLi9Db0NyZWF0ZS1jb21wb25lbnRzL0NvQ3JlYXRlLXJlbmRlci9zcmMvaW5kZXguanM/N2ZkOCJdLCJuYW1lcyI6WyJDb0NyZWF0ZVJlbmRlciIsIl9fZ2V0VmFsdWVGcm9tT2JqZWN0IiwianNvbiIsInBhdGgiLCJqc29uRGF0YSIsInN1YnBhdGgiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJfX2dldFZhbHVlIiwiZGF0YSIsImF0dHJWYWx1ZSIsInJlc3VsdCIsImV4ZWMiLCJ0cmltIiwiX19jcmVhdGVPYmplY3QiLCJrZXlzIiwibmV3T2JqZWN0IiwiX19yZXBsYWNlVmFsdWUiLCJpbnB1dFZhbHVlIiwiaXNQYXNzIiwic2VsZiIsInJlc3VsdFZhbHVlIiwidmFyaWFibGVzIiwibWF0Y2giLCJmb3JFYWNoIiwiYXR0ciIsInZhbHVlIiwicmVwbGFjZSIsInNldEFycmF5IiwidGVtcGxhdGUiLCJ0eXBlIiwiZ2V0QXR0cmlidXRlIiwicmVuZGVyX2tleSIsImFycmF5RGF0YSIsIkFycmF5IiwiaXNBcnJheSIsIml0ZW0iLCJpbmRleCIsImNsb25lRWwiLCJjbG9uZU5vZGUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJyX2RhdGEiLCJzZXRWYWx1ZSIsImluc2VydEFkamFjZW50SFRNTCIsIm91dGVySFRNTCIsImVscyIsInBhc3NUbyIsInRoYXQiLCJmcm9tIiwiZSIsInBhc3NJZCIsImF0dHJpYnV0ZXMiLCJhdHRyX25hbWUiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJ0YWciLCJ0YWdOYW1lIiwic2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJjaGlsZHJlbiIsImlubmVySFRNTCIsImNvbnRhaW5zIiwic2VsZWN0b3IiLCJlbGVtZW50cyIsInJlbmRlciIsImRhdGFSZXN1bHQiLCJ0ZW1wbGF0ZV9kaXYiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0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Q0FBWUYsUUFBWixFQUFzQnZELElBQXRCO0FBQ0EsS0FGRCxNQUVPLElBQUl3RCxRQUFKLEVBQWM7QUFDcEIsV0FBS3JCLFFBQUwsQ0FBY3FCLFFBQWQsRUFBd0J4RCxJQUF4QixFQUE4QnVDLE1BQTlCO0FBQ0E7QUFDRCxHQTFKcUI7QUE0SnRCa0IsUUFBTSxFQUFHLFVBQVNGLFFBQVQsRUFBbUJHLFVBQW5CLEVBQStCO0FBQ3ZDLFFBQUlDLFlBQVksR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCTixRQUF2QixDQUFuQjs7QUFDQSxRQUFJLENBQUNJLFlBQUwsRUFBbUI7QUFDbEI7QUFDQTs7QUFDRCxRQUFJbEMsS0FBSyxDQUFDQyxPQUFOLENBQWNnQyxVQUFkLENBQUosRUFBK0I7QUFDOUJDLGtCQUFZLENBQUNULFlBQWIsQ0FBMEIsbUJBQTFCLEVBQStDLE1BQS9DO0FBQ0EsV0FBS2YsUUFBTCxDQUFjLENBQUN3QixZQUFELENBQWQsRUFBOEI7QUFBQ0csWUFBSSxFQUFFSjtBQUFQLE9BQTlCO0FBQ0EsS0FIRCxNQUdPO0FBQ04sV0FBS3ZCLFFBQUwsQ0FBY3dCLFlBQVksQ0FBQ1AsUUFBM0IsRUFBcUNNLFVBQXJDO0FBQ0E7QUFDRDtBQXZLcUIsQ0FBdkI7ZUEwS2V2RSxjIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlLWNvbXBvbmVudHMvQ29DcmVhdGUtcmVuZGVyL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogY2hhbmdlIG5hbWUgQ2xhc3NcbiAqIGFkZCBmdW5jdGlvbmFsaXR5IHRvIGFkZCB2YWx1ZSBvbiBhbnkgYXR0ciBvZiBlYWNoIGVsZW1lbnRzIGludG8gdGVtcGxhdGVcbiAqL1xuY29uc3QgQ29DcmVhdGVSZW5kZXIgPSB7XG5cblx0X19nZXRWYWx1ZUZyb21PYmplY3QgOiBmdW5jdGlvbihqc29uLCBwYXRoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmKHR5cGVvZiBqc29uID09ICd1bmRlZmluZWQnIHx8ICFwYXRoKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRsZXQganNvbkRhdGEgPSBqc29uLCBzdWJwYXRoID0gcGF0aC5zcGxpdCgnLicpO1xuXHRcdFx0XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHN1YnBhdGgubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0anNvbkRhdGEgPSBqc29uRGF0YVtzdWJwYXRoW2ldXTtcblx0XHRcdFx0aWYgKCFqc29uRGF0YSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGpzb25EYXRhO1xuXHRcdH1jYXRjaChlcnJvcil7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkVycm9yIGluIGdldFZhbHVlRnJvbU9iamVjdFwiLCBlcnJvcik7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXHRcblx0X19nZXRWYWx1ZTogZnVuY3Rpb24oZGF0YSwgYXR0clZhbHVlKSB7XG5cdFx0bGV0IHJlc3VsdCA9IC97e1xccyooW1xcd1xcV10rKVxccyp9fS9nLmV4ZWMoYXR0clZhbHVlKTtcblx0XHRpZiAocmVzdWx0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fX2dldFZhbHVlRnJvbU9iamVjdChkYXRhLCByZXN1bHRbMV0udHJpbSgpKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFxuXHR9LFxuXHRcblx0X19jcmVhdGVPYmplY3Q6IGZ1bmN0aW9uIChkYXRhLCBwYXRoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmICghcGF0aCkgcmV0dXJuIGRhdGE7XG5cdFx0XHRcblx0XHRcdGxldCBrZXlzID0gcGF0aC5zcGxpdCgnLicpXG5cdFx0XHRsZXQgbmV3T2JqZWN0ID0gZGF0YTtcblxuXHRcdFx0Zm9yICh2YXIgIGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdG5ld09iamVjdCA9IHtba2V5c1tpXV06IG5ld09iamVjdH1cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ld09iamVjdDtcblx0XHRcdFxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkVycm9yIGluIGdldFZhbHVlRnJvbU9iamVjdFwiLCBlcnJvcik7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXHRcblx0X19yZXBsYWNlVmFsdWU6IGZ1bmN0aW9uKGRhdGEsIGlucHV0VmFsdWUpIHtcblx0XHRsZXQgaXNQYXNzID0gZmFsc2U7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCByZXN1bHRWYWx1ZSA9IG51bGw7XG5cdFx0Ly8gbGV0IHZhcmlhYmxlcyA9IGlucHV0VmFsdWUubWF0Y2goL3t7XFxzKihcXFMrKVxccyp9fS9nKTtcblx0XHRsZXQgdmFyaWFibGVzID0gaW5wdXRWYWx1ZS5tYXRjaCgve3soW0EtWmEtejAtOV8uLFxcLSBdKil9fS9nKTtcblx0XHRpZiAodmFyaWFibGVzKSB7XG5cdFx0XHR2YXJpYWJsZXMuZm9yRWFjaCgoYXR0cikgPT4ge1xuXHRcdFx0XHRsZXQgdmFsdWUgPSBzZWxmLl9fZ2V0VmFsdWUoZGF0YSwgYXR0cilcblx0XHRcdFx0aWYgKHZhbHVlICYmIHR5cGVvZih2YWx1ZSkgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRpc1Bhc3MgPSB0cnVlO1xuXHRcdFx0XHRcdGlucHV0VmFsdWUgPSBpbnB1dFZhbHVlLnJlcGxhY2UoYXR0ciwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0XG5cdFx0XHRpZiAoaXNQYXNzKSB7XG5cdFx0XHRcdHJlc3VsdFZhbHVlID0gaW5wdXRWYWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdFZhbHVlO1xuXHR9LFxuXHRcblx0c2V0QXJyYXk6IGZ1bmN0aW9uKHRlbXBsYXRlLCBkYXRhKSB7XG5cdFx0Y29uc3QgdHlwZSA9IHRlbXBsYXRlLmdldEF0dHJpYnV0ZSgnZGF0YS1yZW5kZXJfYXJyYXknKSB8fCBcImRhdGFcIjtcblx0XHRjb25zdCByZW5kZXJfa2V5ID0gdGVtcGxhdGUuZ2V0QXR0cmlidXRlKCdkYXRhLXJlbmRlcl9rZXknKSB8fCB0eXBlO1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGNvbnN0IGFycmF5RGF0YSA9IHRoaXMuX19nZXRWYWx1ZUZyb21PYmplY3QoZGF0YSwgdHlwZSk7XG5cblx0XHRpZiAodHlwZSAmJiBBcnJheS5pc0FycmF5KGFycmF5RGF0YSkpIHtcblx0XHRcdGFycmF5RGF0YS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRcblx0XHRcdFx0bGV0IGNsb25lRWwgPSB0ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdGNsb25lRWwuY2xhc3NMaXN0LnJlbW92ZSgndGVtcGxhdGUnKTtcblx0XHRcdFx0Y2xvbmVFbC5jbGFzc0xpc3QuYWRkKCdjbG9uZV8nICsgdHlwZSk7XG5cdFx0XHRcdGlmICh0eXBlb2YgaXRlbSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRpdGVtID0ge1wiLS1cIjogaXRlbX07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aXRlbVsnaW5kZXgnXSA9IGluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxldCByX2RhdGEgPSBzZWxmLl9fY3JlYXRlT2JqZWN0KGl0ZW0sIHJlbmRlcl9rZXkpO1xuXG5cdFx0XHRcdHNlbGYuc2V0VmFsdWUoW2Nsb25lRWxdLCByX2RhdGEpO1xuXHRcdFx0XHR0ZW1wbGF0ZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWJlZ2luJywgY2xvbmVFbC5vdXRlckhUTUwpO1xuXHRcdFx0fSlcblx0XHR9XG5cdH0sXG4gXG5cdHNldFZhbHVlOmZ1bmN0aW9uKGVscywgZGF0YSwgcGFzc1RvLCB0ZW1wbGF0ZSl7XG5cdFx0aWYgKCFkYXRhKSByZXR1cm47XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0QXJyYXkuZnJvbShlbHMpLmZvckVhY2goZSA9PiB7XG5cdFx0XHRsZXQgcGFzc0lkID0gZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFzc19pZCcpO1xuXHRcdFx0aWYgKHBhc3NUbyAmJiBwYXNzSWQgIT0gcGFzc1RvKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdEFycmF5LmZyb20oZS5hdHRyaWJ1dGVzKS5mb3JFYWNoKGF0dHI9Pntcblx0XHRcdFx0bGV0IGF0dHJfbmFtZSA9IGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRsZXQgIGlzUGFzcyA9IGZhbHNlO1xuXHRcdFx0XHRsZXQgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcblx0XHRcdFx0YXR0clZhbHVlID0gdGhhdC5fX3JlcGxhY2VWYWx1ZShkYXRhLCBhdHRyVmFsdWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKGF0dHJWYWx1ZSkge1xuXHRcdFx0XHRcdGlmKGF0dHJfbmFtZSA9PSAndmFsdWUnKXtcblx0XHRcdFx0XHRcdGxldCB0YWcgPSBlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHN3aXRjaCAodGFnKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2lucHV0Jzpcblx0XHRcdFx0XHRcdFx0XHQgZS5zZXRBdHRyaWJ1dGUoYXR0cl9uYW1lLCBhdHRyVmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICd0ZXh0YXJlYSc6XG5cdFx0XHRcdFx0XHRcdFx0ZS5zZXRBdHRyaWJ1dGUoYXR0cl9uYW1lLCBhdHRyVmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcdGUudGV4dENvbnRlbnQgPSBhdHRyVmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlLmlubmVySFRNTCA9ICBhdHRyVmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlLnNldEF0dHJpYnV0ZShhdHRyX25hbWUsIGF0dHJWYWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZiAoZS5jaGlsZHJlbi5sZW5ndGggPT0gMCAmJiBlLnRleHRDb250ZW50KSB7XG5cdFx0XHRcdGxldCB0ZXh0Q29udGVudCA9IGUudGV4dENvbnRlbnQ7XG5cdFx0XHRcdHRleHRDb250ZW50ID0gdGhhdC5fX3JlcGxhY2VWYWx1ZShkYXRhLCB0ZXh0Q29udGVudCk7XG5cdFx0XHRcdGlmICh0ZXh0Q29udGVudCkge1xuXHRcdFx0XHRcdGUudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0aWYoZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRoYXQuc2V0VmFsdWUoZS5jaGlsZHJlbiwgZGF0YSlcblx0XHRcdFx0XG5cdFx0XHRcdGlmIChlLmNsYXNzTGlzdC5jb250YWlucygndGVtcGxhdGUnKSkge1xuXHRcdFx0XHRcdHRoYXQuc2V0QXJyYXkoZSwgZGF0YSk7XG5cdFx0XHRcdH0gXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdFxuXHRkYXRhOiBmdW5jdGlvbih7c2VsZWN0b3IsIGRhdGEsIGVsZW1lbnRzLCBwYXNzVG99KSB7XG5cdFx0aWYgKHNlbGVjdG9yKSB7XG5cdFx0XHR0aGlzLnJlbmRlcihzZWxlY3RvciwgZGF0YSk7XG5cdFx0fSBlbHNlIGlmIChlbGVtZW50cykge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZShlbGVtZW50cywgZGF0YSwgcGFzc1RvKTtcblx0XHR9XG5cdH0sXG5cdFxuXHRyZW5kZXIgOiBmdW5jdGlvbihzZWxlY3RvciwgZGF0YVJlc3VsdCkge1xuXHRcdGxldCB0ZW1wbGF0ZV9kaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxuXHRcdGlmICghdGVtcGxhdGVfZGl2KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChBcnJheS5pc0FycmF5KGRhdGFSZXN1bHQpKSB7XG5cdFx0XHR0ZW1wbGF0ZV9kaXYuc2V0QXR0cmlidXRlKCdkYXRhLXJlbmRlcl9hcnJheScsICd0ZXN0Jyk7XG5cdFx0XHR0aGlzLnNldFZhbHVlKFt0ZW1wbGF0ZV9kaXZdLCB7dGVzdDogZGF0YVJlc3VsdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlKHRlbXBsYXRlX2Rpdi5jaGlsZHJlbiwgZGF0YVJlc3VsdCk7XG5cdFx0fVxuXHR9XG5cbn1cbmV4cG9ydCBkZWZhdWx0IENvQ3JlYXRlUmVuZGVyOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-render/src/index.js\n")},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! @cocreate/api/src */ \"../../CoCreate-components/CoCreate-api/src/index.js\"));\n\nvar _src2 = __webpack_require__(/*! ../../../CoCreateJS/src */ \"../../CoCreateJS/src/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateSendGrid = {\n  id: 'sendgrid',\n  actions: ['domainList', 'domainAuthenticate', 'sendDNSEmail', 'getSubUsersList', 'postSubUser', 'getMarketingContacts', 'postMarketingContact', 'getMarketingStats', 'getMarketingSinglesends', 'getEmailAddress', 'EmailValidation', 'sendEmail', 'domainValidate'],\n  render_domainList: function (data) {\n    console.log(data);\n  },\n  render_domainValidate: function (data) {\n    console.log(data);\n  },\n  render_domainAuthenticate: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    } //console.log(data);\n\n\n    data = {\n      data: data\n    };\n    console.log(\"DAta \", data);\n    CoCreate.api.render('sendgridDomainAuthenticate', data);\n  },\n  render_sendDNSEmail: function (data) {\n    console.log(data);\n  },\n  render_getSubUsersList: function (data) {\n    console.log(data);\n  },\n  render_getMarketingContacts: function (data) {\n    console.log(data);\n  },\n  render_postMarketingContact: function (data) {\n    console.log(data);\n  },\n  render_getMarketingStats: function (data) {\n    console.log(data);\n  },\n  render_getMarketingSinglesends: function (data) {\n    console.log(data);\n  },\n  render_getEmailAddress: function (data) {\n    console.log(data);\n  },\n  render_EmailValidation: function (data) {\n    console.log(data);\n  },\n  render_sendEmail: function (data) {\n    console.log(data);\n  }\n};\n\n_src.default.init({\n  name: CoCreateSendGrid.id,\n  module: CoCreateSendGrid\n});\n\nvar _default = CoCreateSendgrid;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sIm5hbWVzIjpbIkNvQ3JlYXRlU2VuZEdyaWQiLCJpZCIsImFjdGlvbnMiLCJyZW5kZXJfZG9tYWluTGlzdCIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwicmVuZGVyX2RvbWFpblZhbGlkYXRlIiwicmVuZGVyX2RvbWFpbkF1dGhlbnRpY2F0ZSIsIm9iamVjdCIsImFsZXJ0IiwiQ29DcmVhdGUiLCJhcGkiLCJyZW5kZXIiLCJyZW5kZXJfc2VuZEROU0VtYWlsIiwicmVuZGVyX2dldFN1YlVzZXJzTGlzdCIsInJlbmRlcl9nZXRNYXJrZXRpbmdDb250YWN0cyIsInJlbmRlcl9wb3N0TWFya2V0aW5nQ29udGFjdCIsInJlbmRlcl9nZXRNYXJrZXRpbmdTdGF0cyIsInJlbmRlcl9nZXRNYXJrZXRpbmdTaW5nbGVzZW5kcyIsInJlbmRlcl9nZXRFbWFpbEFkZHJlc3MiLCJyZW5kZXJfRW1haWxWYWxpZGF0aW9uIiwicmVuZGVyX3NlbmRFbWFpbCIsImluaXQiLCJuYW1lIiwibW9kdWxlIiwiQ29DcmVhdGVTZW5kZ3JpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsZ0JBQWdCLEdBQUc7QUFDeEJDLElBQUUsRUFBRSxVQURvQjtBQUV4QkMsU0FBTyxFQUFFLENBQ1IsWUFEUSxFQUVSLG9CQUZRLEVBR1IsY0FIUSxFQUlSLGlCQUpRLEVBS1IsYUFMUSxFQU1SLHNCQU5RLEVBT1Isc0JBUFEsRUFRUixtQkFSUSxFQVNSLHlCQVRRLEVBVVIsaUJBVlEsRUFXUixpQkFYUSxFQVlSLFdBWlEsRUFhUixnQkFiUSxDQUZlO0FBa0J4QkMsbUJBQWlCLEVBQUUsVUFBVUMsSUFBVixFQUFnQjtBQUNsQ0MsV0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDQSxHQXBCdUI7QUFzQnhCRyx1QkFBcUIsRUFBRSxVQUFVSCxJQUFWLEVBQWdCO0FBQ3RDQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLEdBeEJ1QjtBQXlCeEJJLDJCQUF5QixFQUFFLFVBQVVKLElBQVYsRUFBZ0I7QUFDMUMsUUFBSUEsSUFBSSxDQUFDSyxNQUFMLElBQWUsT0FBbkIsRUFBNEI7QUFDbEJDLFdBQUssQ0FBQ04sSUFBSSxDQUFDQSxJQUFOLENBQUw7QUFDSCxLQUhtQyxDQUkxQzs7O0FBQ0FBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNHQyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CRixJQUFwQjtBQUNBTyxZQUFRLENBQUNDLEdBQVQsQ0FBYUMsTUFBYixDQUFvQiw0QkFBcEIsRUFBa0RULElBQWxEO0FBQ0gsR0FqQ3VCO0FBbUN4QlUscUJBQW1CLEVBQUUsVUFBVVYsSUFBVixFQUFnQjtBQUNwQ0MsV0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDQSxHQXJDdUI7QUF1Q3hCVyx3QkFBc0IsRUFBRSxVQUFVWCxJQUFWLEVBQWdCO0FBQ3ZDQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLEdBekN1QjtBQTJDeEJZLDZCQUEyQixFQUFFLFVBQVVaLElBQVYsRUFBZ0I7QUFDNUNDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0EsR0E3Q3VCO0FBK0N4QmEsNkJBQTJCLEVBQUUsVUFBVWIsSUFBVixFQUFnQjtBQUM1Q0MsV0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDQSxHQWpEdUI7QUFtRHhCYywwQkFBd0IsRUFBRSxVQUFVZCxJQUFWLEVBQWdCO0FBQ3pDQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLEdBckR1QjtBQXVEeEJlLGdDQUE4QixFQUFFLFVBQVVmLElBQVYsRUFBZ0I7QUFDL0NDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0EsR0F6RHVCO0FBMkR4QmdCLHdCQUFzQixFQUFFLFVBQVVoQixJQUFWLEVBQWdCO0FBQ3ZDQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBLEdBN0R1QjtBQStEeEJpQix3QkFBc0IsRUFBRSxVQUFVakIsSUFBVixFQUFnQjtBQUN2Q0MsV0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDQSxHQWpFdUI7QUFtRXhCa0Isa0JBQWdCLEVBQUcsVUFBVWxCLElBQVYsRUFBZ0I7QUFDbENDLFdBQU8sQ0FBQ0MsR0FBUixDQUFZRixJQUFaO0FBQ0E7QUFyRXVCLENBQXpCOztBQXdFQVEsYUFBSVcsSUFBSixDQUFTO0FBQ1JDLE1BQUksRUFBRXhCLGdCQUFnQixDQUFDQyxFQURmO0FBRVJ3QixRQUFNLEVBQUV6QjtBQUZBLENBQVQ7O2VBS2UwQixnQiIsImZpbGUiOiIuL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSAnQGNvY3JlYXRlL2FwaS9zcmMnXG5pbXBvcnQge3NvY2tldCwgY3J1ZH0gZnJvbSAnLi4vLi4vLi4vQ29DcmVhdGVKUy9zcmMnO1xuXG5jb25zdCBDb0NyZWF0ZVNlbmRHcmlkID0ge1xuXHRpZDogJ3NlbmRncmlkJyxcblx0YWN0aW9uczogW1xuXHRcdCdkb21haW5MaXN0Jyxcblx0XHQnZG9tYWluQXV0aGVudGljYXRlJyxcblx0XHQnc2VuZEROU0VtYWlsJyxcblx0XHQnZ2V0U3ViVXNlcnNMaXN0Jyxcblx0XHQncG9zdFN1YlVzZXInLFxuXHRcdCdnZXRNYXJrZXRpbmdDb250YWN0cycsXG5cdFx0J3Bvc3RNYXJrZXRpbmdDb250YWN0Jyxcblx0XHQnZ2V0TWFya2V0aW5nU3RhdHMnLFxuXHRcdCdnZXRNYXJrZXRpbmdTaW5nbGVzZW5kcycsXG5cdFx0J2dldEVtYWlsQWRkcmVzcycsXG5cdFx0J0VtYWlsVmFsaWRhdGlvbicsXG5cdFx0J3NlbmRFbWFpbCcsXG5cdFx0J2RvbWFpblZhbGlkYXRlJ1xuXHRdLFxuXG5cdHJlbmRlcl9kb21haW5MaXN0OiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxuXG5cdHJlbmRlcl9kb21haW5WYWxpZGF0ZTogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0fSxcblx0cmVuZGVyX2RvbWFpbkF1dGhlbnRpY2F0ZTogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cblx0XHQvL2NvbnNvbGUubG9nKGRhdGEpO1xuXHRcdGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgXHRjb25zb2xlLmxvZyhcIkRBdGEgXCIsZGF0YSlcbiAgICBcdENvQ3JlYXRlLmFwaS5yZW5kZXIoJ3NlbmRncmlkRG9tYWluQXV0aGVudGljYXRlJywgZGF0YSk7XHRcblx0fSxcblxuXHRyZW5kZXJfc2VuZEROU0VtYWlsOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxuXG5cdHJlbmRlcl9nZXRTdWJVc2Vyc0xpc3Q6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdH0sXG5cblx0cmVuZGVyX2dldE1hcmtldGluZ0NvbnRhY3RzOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxuXHRcblx0cmVuZGVyX3Bvc3RNYXJrZXRpbmdDb250YWN0OiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxuXHRcblx0cmVuZGVyX2dldE1hcmtldGluZ1N0YXRzOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxuXHRcblx0cmVuZGVyX2dldE1hcmtldGluZ1NpbmdsZXNlbmRzOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHR9LFxuXHRcblx0cmVuZGVyX2dldEVtYWlsQWRkcmVzczogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0fSxcblx0XG5cdHJlbmRlcl9FbWFpbFZhbGlkYXRpb246IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdH0sXG5cdFxuXHRyZW5kZXJfc2VuZEVtYWlsIDogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0fSxcbn1cblxuYXBpLmluaXQoe1xuXHRuYW1lOiBDb0NyZWF0ZVNlbmRHcmlkLmlkLCBcblx0bW9kdWxlOlx0Q29DcmVhdGVTZW5kR3JpZFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvQ3JlYXRlU2VuZGdyaWQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n")},"../../CoCreateJS/src/common-fun.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCommonParams = getCommonParams;\nexports.getCommonParamsExtend = getCommonParamsExtend;\nexports.generateSocketClient = generateSocketClient;\n\nfunction getCommonParams() {\n  return {\n    "apiKey": config.apiKey,\n    "securityKey": config.securityKey,\n    "organization_id": config.organization_Id\n  };\n}\n\nfunction getCommonParamsExtend(info) {\n  return {\n    "apiKey": info.apiKey || config.apiKey,\n    "securityKey": info.securityKey || config.securityKey,\n    "organization_id": info.organization_id || config.organization_Id\n  };\n}\n\nfunction generateSocketClient(namespace, room) {\n  let ns = namespace || config.organization_Id;\n  let rr = room || \'\';\n\n  if (rr) {\n    return `${ns}/${rr}`;\n  } else {\n    return ns;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uLi9Db0NyZWF0ZUpTL3NyYy9jb21tb24tZnVuLmpzP2I4OWYiXSwibmFtZXMiOlsiZ2V0Q29tbW9uUGFyYW1zIiwiY29uZmlnIiwiYXBpS2V5Iiwic2VjdXJpdHlLZXkiLCJvcmdhbml6YXRpb25fSWQiLCJnZXRDb21tb25QYXJhbXNFeHRlbmQiLCJpbmZvIiwib3JnYW5pemF0aW9uX2lkIiwiZ2VuZXJhdGVTb2NrZXRDbGllbnQiLCJuYW1lc3BhY2UiLCJyb29tIiwibnMiLCJyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsU0FBU0EsZUFBVCxHQUNBO0FBQ0UsU0FBTztBQUNMLGNBQW9CQyxNQUFNLENBQUNDLE1BRHRCO0FBRUwsbUJBQW9CRCxNQUFNLENBQUNFLFdBRnRCO0FBR0wsdUJBQW9CRixNQUFNLENBQUNHO0FBSHRCLEdBQVA7QUFLRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQkMsSUFBL0IsRUFDQTtBQUNFLFNBQU87QUFDTCxjQUFvQkEsSUFBSSxDQUFDSixNQUFMLElBQWVELE1BQU0sQ0FBQ0MsTUFEckM7QUFFTCxtQkFBb0JJLElBQUksQ0FBQ0gsV0FBTCxJQUFvQkYsTUFBTSxDQUFDRSxXQUYxQztBQUdMLHVCQUFvQkcsSUFBSSxDQUFDQyxlQUFMLElBQXdCTixNQUFNLENBQUNHO0FBSDlDLEdBQVA7QUFLRDs7QUFFRCxTQUFTSSxvQkFBVCxDQUErQkMsU0FBL0IsRUFBMENDLElBQTFDLEVBQ0E7QUFDRSxNQUFJQyxFQUFFLEdBQUdGLFNBQVMsSUFBSVIsTUFBTSxDQUFDRyxlQUE3QjtBQUNBLE1BQUlRLEVBQUUsR0FBR0YsSUFBSSxJQUFJLEVBQWpCOztBQUNBLE1BQUlFLEVBQUosRUFBUTtBQUNOLFdBQVEsR0FBRUQsRUFBRyxJQUFHQyxFQUFHLEVBQW5CO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0QsRUFBUDtBQUNEO0FBQ0YiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGVKUy9zcmMvY29tbW9uLWZ1bi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldENvbW1vblBhcmFtcygpIFxue1xuICByZXR1cm4ge1xuICAgIFwiYXBpS2V5XCI6ICAgICAgICAgICBjb25maWcuYXBpS2V5LFxuICAgIFwic2VjdXJpdHlLZXlcIjogICAgICBjb25maWcuc2VjdXJpdHlLZXksXG4gICAgXCJvcmdhbml6YXRpb25faWRcIjogIGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kKGluZm8pIFxue1xuICByZXR1cm4ge1xuICAgIFwiYXBpS2V5XCI6ICAgICAgICAgICBpbmZvLmFwaUtleSB8fCBjb25maWcuYXBpS2V5LFxuICAgIFwic2VjdXJpdHlLZXlcIjogICAgICBpbmZvLnNlY3VyaXR5S2V5IHx8IGNvbmZpZy5zZWN1cml0eUtleSxcbiAgICBcIm9yZ2FuaXphdGlvbl9pZFwiOiAgaW5mby5vcmdhbml6YXRpb25faWQgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZCxcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVNvY2tldENsaWVudCAobmFtZXNwYWNlLCByb29tKSBcbntcbiAgbGV0IG5zID0gbmFtZXNwYWNlIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWRcbiAgbGV0IHJyID0gcm9vbSB8fCAnJztcbiAgaWYgKHJyKSB7XG4gICAgcmV0dXJuIGAke25zfS8ke3JyfWBcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnM7XG4gIH1cbn1cblxuZXhwb3J0IHtnZXRDb21tb25QYXJhbXMsIGdldENvbW1vblBhcmFtc0V4dGVuZCwgZ2VuZXJhdGVTb2NrZXRDbGllbnR9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/common-fun.js\n')},"../../CoCreateJS/src/core.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = core;\n// ***********   define variables end ***************** /// \nconst CoCreateCore = {\n  socketInitFuncs: [],\n  moduleSelectors: [],\n  socket: null,\n  host: 'server.cocreate.app',\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n  init: function (host, namespace) {\n    if (host) {\n      this.host = host;\n    }\n\n    this.__setConfig();\n\n    this.createGeneralSocket(host, namespace || config.organization_Id);\n    this.initSocketListener();\n    this.createUserSocket(host);\n  },\n  __setConfig: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let securityKey = window.localStorage.getItem('securityKey');\n    let apiKey = window.localStorage.getItem('apiKey');\n    if (orgId) config['organization_Id'] = orgId;\n    if (apiKey) config['apiKey'] = apiKey;\n    if (securityKey) config['securityKey'] = securityKey;\n  },\n  initSocketListener: function () {\n    const self = this;\n    this.socket.listen('connect', function (data, room) {\n      if (room == self.socket.getGlobalScope()) {\n        self.socketInitFuncs.forEach(func => {\n          func.initFunc.call(func.instance);\n        });\n      }\n    });\n    this.socket.listen('readDocument', function (data) {\n      const metadata = data.metadata; // if (metadata && metadata.type == 'crdt') {\n      //   self.initRenderCrdtData(data);\n      // } else {\n      //   // self.renderModules(data)\n      // }\n\n      return data;\n    });\n    this.socket.listen('updateDocument', function (data) {// self.renderModules(data)\n    });\n    this.socket.listen('deletedDocument', function (data) {\n      console.log(data);\n    });\n    this.socket.listen('sendMessage', function (data) {\n      console.log(data);\n    });\n    this.listenMessage('downloadFileInfo', function (data) {\n      self.socket.saveFileName = data.file_name;\n    });\n  },\n  createUserSocket: function (host) {\n    var user_id = window.localStorage.getItem('user_id');\n\n    if (user_id) {\n      this.socket.create({\n        namespace: 'users',\n        room: user_id,\n        host: host\n      });\n    }\n  },\n  createGeneralSocket: function (host, namespace) {\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  registerInit: function (initFunc, instance) {\n    this.socketInitFuncs.push({\n      initFunc,\n      instance: instance || window\n    });\n  },\n  // registerSelector: function(selector) {\n  //   if (this.moduleSelectors.indexOf(selector) === -1) {\n  //     this.moduleSelectors.push(selector);\n  //   }\n  // },\n  // getSelectors: function(selector) {\n  //   return this.moduleSelectors.join(\",\");\n  // },\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  createSocket: function (config) {\n    this.socket.create(config);\n  },\n  destroySocket: function (config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.socket.getKey(namespace, room);\n    let socket = this.socket.sockets.get(key);\n\n    if (!socket) {\n      return;\n    }\n\n    this.socket.destroy(socket, key);\n  }\n};\n\nfunction core(socket) {\n  CoCreateCore.setSocket(socket);\n  return CoCreateCore;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/core.js\n")},"../../CoCreateJS/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.addComponent = addComponent;\nexports.removeComponent = removeComponent;\nexports.utils = exports.message = exports.crud = exports.socketApi = exports.socket = exports.core = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! ./socket.js */ "../../CoCreateJS/src/socket.js"));\n\nvar _core = _interopRequireDefault(__webpack_require__(/*! ./core.js */ "../../CoCreateJS/src/core.js"));\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ "../../CoCreateJS/src/utils.js"));\n\nexports.utils = utils;\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! ./message.js */ "../../CoCreateJS/src/message.js"));\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-components/CoCreate-crud/src */ "../../CoCreate-components/CoCreate-crud/src/index.js"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global window*/\n// import CRDT from "./crdt.js"\nlet socket = new _socket.default(\'ws\');\nexports.socket = socket;\nlet socketApi = new _socket.default(\'api\');\nexports.socketApi = socketApi;\nlet core = (0, _core.default)(socket);\nexports.core = core;\nlet crud = (0, _src.default)(socket);\nexports.crud = crud;\nlet message = (0, _message.default)(socket);\nexports.message = message;\ncore.init(window.config.host ? window.config.host : \'server.cocreate.app\');\n\nfunction addComponent(key, component) {\n  this[key] = component;\n}\n\nfunction removeComponent(key) {\n  if (this[key]) {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uLi9Db0NyZWF0ZUpTL3NyYy9pbmRleC5qcz8yODlhIl0sIm5hbWVzIjpbInNvY2tldCIsIkNvQ3JlYXRlU29ja2V0Iiwic29ja2V0QXBpIiwiY29yZSIsImNydWQiLCJtZXNzYWdlIiwiaW5pdCIsIndpbmRvdyIsImNvbmZpZyIsImhvc3QiLCJhZGRDb21wb25lbnQiLCJrZXkiLCJjb21wb25lbnQiLCJyZW1vdmVDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBTEE7QUFPQTtBQUNBLElBQUlBLE1BQU0sR0FBRyxJQUFJQyxlQUFKLENBQW1CLElBQW5CLENBQWI7O0FBQ0EsSUFBSUMsU0FBUyxHQUFHLElBQUlELGVBQUosQ0FBbUIsS0FBbkIsQ0FBaEI7O0FBRUEsSUFBSUUsSUFBSSxHQUFHLG1CQUFLSCxNQUFMLENBQVg7O0FBQ0EsSUFBSUksSUFBSSxHQUFHLGtCQUFLSixNQUFMLENBQVg7O0FBQ0EsSUFBSUssT0FBTyxHQUFHLHNCQUFRTCxNQUFSLENBQWQ7O0FBRUFHLElBQUksQ0FBQ0csSUFBTCxDQUFVQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBZCxHQUFxQkYsTUFBTSxDQUFDQyxNQUFQLENBQWNDLElBQW5DLEdBQTBDLHFCQUFwRDs7QUFFQSxTQUFTQyxZQUFULENBQXNCQyxHQUF0QixFQUEyQkMsU0FBM0IsRUFBc0M7QUFDbEMsT0FBS0QsR0FBTCxJQUFZQyxTQUFaO0FBQ0g7O0FBRUQsU0FBU0MsZUFBVCxDQUF5QkYsR0FBekIsRUFBOEI7QUFDMUIsTUFBSSxLQUFLQSxHQUFMLENBQUosRUFBZSxDQUVkO0FBQ0oiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGVKUy9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCB3aW5kb3cqL1xuaW1wb3J0IENvQ3JlYXRlU29ja2V0IGZyb20gXCIuL3NvY2tldC5qc1wiXG5pbXBvcnQgQ29yZSBmcm9tIFwiLi9jb3JlLmpzXCJcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWxzLmpzXCJcbmltcG9ydCBNZXNzYWdlIGZyb20gXCIuL21lc3NhZ2UuanNcIlxuaW1wb3J0IENSVUQgZnJvbSBcIi4uLy4uL0NvQ3JlYXRlLWNvbXBvbmVudHMvQ29DcmVhdGUtY3J1ZC9zcmNcIlxuXG4vLyBpbXBvcnQgQ1JEVCBmcm9tIFwiLi9jcmR0LmpzXCJcbmxldCBzb2NrZXQgPSBuZXcgQ29DcmVhdGVTb2NrZXQoJ3dzJyk7XG5sZXQgc29ja2V0QXBpID0gbmV3IENvQ3JlYXRlU29ja2V0KCdhcGknKTtcblxubGV0IGNvcmUgPSBDb3JlKHNvY2tldClcbmxldCBjcnVkID0gQ1JVRChzb2NrZXQpXG5sZXQgbWVzc2FnZSA9IE1lc3NhZ2Uoc29ja2V0KVxuXG5jb3JlLmluaXQod2luZG93LmNvbmZpZy5ob3N0ID8gd2luZG93LmNvbmZpZy5ob3N0IDogJ3NlcnZlci5jb2NyZWF0ZS5hcHAnKTtcblxuZnVuY3Rpb24gYWRkQ29tcG9uZW50KGtleSwgY29tcG9uZW50KSB7XG4gICAgdGhpc1trZXldID0gY29tcG9uZW50O1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb21wb25lbnQoa2V5KSB7XG4gICAgaWYgKHRoaXNba2V5XSkge1xuXG4gICAgfVxufVxuXG5leHBvcnQge1xuICAgIGNvcmUsXG4gICAgc29ja2V0LFxuICAgIHNvY2tldEFwaSxcbiAgICBjcnVkLFxuICAgIHV0aWxzLFxuICAgIG1lc3NhZ2UsXG4gICAgYWRkQ29tcG9uZW50LFxuICAgIHJlbW92ZUNvbXBvbmVudFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/index.js\n')},"../../CoCreateJS/src/message.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = Message;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\nconst CoCreateMessage = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n  CoCreate.message.send({\n     namespace: '',\n     room: '',\n     broadcast: true/false,\n     broadcast_sender: true/false\n     \n     rooms: [r1, r2],\n     emit: {\n       message': 'nice game',\n       data': 'let's play a game ....'\n     }\n   })\n  */\n  send: function (data) {\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!data || !data.emit) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...data\n    };\n    /** socket parameters **/\n    // if (data['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (data['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(data.namespace, data.room);\n    this.socket.send('sendMessage', request_data, room);\n  },\n  receive: function (message, fun) {\n    this.socket.listen(message, fun);\n  }\n};\n\nfunction Message(socket) {\n  CoCreateMessage.setSocket(socket);\n  return CoCreateMessage;\n}\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZW5kZ3JpZC8uLi9Db0NyZWF0ZUpTL3NyYy9tZXNzYWdlLmpzPzc4NDIiXSwibmFtZXMiOlsiQ29DcmVhdGVNZXNzYWdlIiwic29ja2V0Iiwic2V0U29ja2V0Iiwic2VuZCIsImRhdGEiLCJyZXF1ZXN0X2RhdGEiLCJlbWl0Iiwicm9vbSIsIm5hbWVzcGFjZSIsInJlY2VpdmUiLCJtZXNzYWdlIiwiZnVuIiwibGlzdGVuIiwiTWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBLE1BQU1BLGVBQWUsR0FBRztBQUN0QkMsUUFBTSxFQUFFLElBRGM7QUFFdEJDLFdBQVMsRUFBRSxVQUFTRCxNQUFULEVBQWlCO0FBQzFCLFNBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNELEdBSnFCOztBQUt2QjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0NFLE1BQUksRUFBRSxVQUFTQyxJQUFULEVBQWU7QUFDbEIsUUFBSUMsWUFBWSxHQUFHLGlDQUFuQjs7QUFFQSxRQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNFLElBQW5CLEVBQXlCO0FBQ3ZCO0FBQ0Q7O0FBQ0RELGdCQUFZLEdBQUcsRUFBQyxHQUFHQSxZQUFKO0FBQWtCLFNBQUdEO0FBQXJCLEtBQWY7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFNRyxJQUFJLEdBQUcscUNBQXFCSCxJQUFJLENBQUNJLFNBQTFCLEVBQXFDSixJQUFJLENBQUNHLElBQTFDLENBQWI7QUFFQSxTQUFLTixNQUFMLENBQVlFLElBQVosQ0FBaUIsYUFBakIsRUFBZ0NFLFlBQWhDLEVBQThDRSxJQUE5QztBQUNGLEdBckNzQjtBQXVDdkJFLFNBQU8sRUFBRSxVQUFTQyxPQUFULEVBQWtCQyxHQUFsQixFQUF1QjtBQUM5QixTQUFLVixNQUFMLENBQVlXLE1BQVosQ0FBbUJGLE9BQW5CLEVBQTRCQyxHQUE1QjtBQUNEO0FBekNzQixDQUF4Qjs7QUE0Q2UsU0FBU0UsT0FBVCxDQUFpQlosTUFBakIsRUFBeUI7QUFDdENELGlCQUFlLENBQUNFLFNBQWhCLENBQTBCRCxNQUExQjtBQUNBLFNBQU9ELGVBQVA7QUFDRDs7QUFBQSIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9tZXNzYWdlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtnZXRDb21tb25QYXJhbXMsIGdldENvbW1vblBhcmFtc0V4dGVuZCwgZ2VuZXJhdGVTb2NrZXRDbGllbnR9IGZyb20gXCIuL2NvbW1vbi1mdW4uanNcIlxuXG5jb25zdCBDb0NyZWF0ZU1lc3NhZ2UgPSB7XG4gIHNvY2tldDogbnVsbCxcbiAgc2V0U29ja2V0OiBmdW5jdGlvbihzb2NrZXQpIHtcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgfSxcbiAvKlxuIENvQ3JlYXRlLm1lc3NhZ2Uuc2VuZCh7XG4gICAgbmFtZXNwYWNlOiAnJyxcbiAgICByb29tOiAnJyxcbiAgICBicm9hZGNhc3Q6IHRydWUvZmFsc2UsXG4gICAgYnJvYWRjYXN0X3NlbmRlcjogdHJ1ZS9mYWxzZVxuICAgIFxuICAgIHJvb21zOiBbcjEsIHIyXSxcbiAgICBlbWl0OiB7XG4gICAgICBtZXNzYWdlJzogJ25pY2UgZ2FtZScsXG4gICAgICBkYXRhJzogJ2xldCdzIHBsYXkgYSBnYW1lIC4uLi4nXG4gICAgfVxuICB9KVxuICovXG4gc2VuZDogZnVuY3Rpb24oZGF0YSkge1xuICAgIGxldCByZXF1ZXN0X2RhdGEgPSBnZXRDb21tb25QYXJhbXMoKTtcbiAgICBcbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEuZW1pdCkge1xuICAgICAgcmV0dXJuOyAgICAgXG4gICAgfVxuICAgIHJlcXVlc3RfZGF0YSA9IHsuLi5yZXF1ZXN0X2RhdGEsIC4uLmRhdGF9XG4gICAgXG4gICAgLyoqIHNvY2tldCBwYXJhbWV0ZXJzICoqL1xuICAgIC8vIGlmIChkYXRhWydicm9hZGNhc3QnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gICByZXF1ZXN0X2RhdGFbJ2Jyb2FkY2FzdCddID0gdHJ1ZTtcbiAgICAvLyB9XG4gICAgLy8gaWYgKGRhdGFbJ2Jyb2FkY2FzdF9zZW5kZXInXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gICByZXF1ZXN0X2RhdGFbJ2Jyb2FkY2FzdF9zZW5kZXInXSA9IHRydWU7XG4gICAgLy8gfVxuICAgIGNvbnN0IHJvb20gPSBnZW5lcmF0ZVNvY2tldENsaWVudChkYXRhLm5hbWVzcGFjZSwgZGF0YS5yb29tKTtcbiAgICBcbiAgICB0aGlzLnNvY2tldC5zZW5kKCdzZW5kTWVzc2FnZScsIHJlcXVlc3RfZGF0YSwgcm9vbSlcbiB9LFxuIFxuIHJlY2VpdmU6IGZ1bmN0aW9uKG1lc3NhZ2UsIGZ1bikge1xuICAgdGhpcy5zb2NrZXQubGlzdGVuKG1lc3NhZ2UsIGZ1bik7XG4gfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWVzc2FnZShzb2NrZXQpIHtcbiAgQ29DcmVhdGVNZXNzYWdlLnNldFNvY2tldChzb2NrZXQpXG4gIHJldHVybiBDb0NyZWF0ZU1lc3NhZ2U7XG59O1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/message.js\n")},"../../CoCreateJS/src/socket.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nclass CoCreateSocket {\n  constructor(prefix = \"crud\") {\n    this.prefix = prefix || \"crud\";\n    this.sockets = new Map();\n    this.listeners = new Map();\n    this.messageQueue = new Map();\n    this.saveFileName = '';\n    this.globalScope = \"\";\n  }\n\n  setGlobalScope(scope) {\n    this.globalScope = `${this.prefix}/${scope}`;\n  }\n\n  getGlobalScope() {\n    return this.globalScope;\n  }\n  /**\n   * config: {namespace, room, host}\n   */\n\n\n  create(config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.getKey(namespace, room);\n\n    let _this = this;\n\n    let socket;\n\n    if (this.sockets.get(key)) {\n      socket = this.sockets.get(key);\n      console.log('SOcket already has been register');\n      return;\n    }\n\n    let w_protocol = window.location.protocol;\n\n    if (window.location.protocol === \"about:\") {\n      w_protocol = window.parent.location.protocol;\n    }\n\n    let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n    const port = config.port ? config.port : 8088;\n    let socket_url = `${protocol}://${window.location.host}:${port}/${key}`;\n\n    if (config.host) {\n      if (config.host.includes(\"://\")) {\n        socket_url = `${config.host}/${key}`;\n      } else {\n        socket_url = `${protocol}://${config.host}:${port}/${key}`;\n      }\n    }\n\n    socket = new WebSocket(socket_url);\n\n    socket.onopen = function (event) {\n      console.log('created socket: ' + key);\n      const messages = _this.messageQueue.get(key) || [];\n      console.log(messages);\n      messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n      _this.sockets.set(key, socket);\n\n      _this.messageQueue.set(key, []);\n    };\n\n    socket.onclose = function (event) {\n      switch (event.code) {\n        case 1000:\n          // close normal\n          console.log(\"websocket: closed\");\n          break;\n\n        default:\n          _this.destroy(socket, key);\n\n          _this.reconnect(socket, config);\n\n          break;\n      }\n    };\n\n    socket.onerror = function (err) {\n      console.log('Socket error');\n\n      _this.destroy(socket, key);\n\n      _this.reconnect(socket, config);\n    };\n\n    socket.onmessage = function (data) {\n      try {\n        if (data.data instanceof Blob) {\n          _this.saveFile(data.data);\n\n          return;\n        }\n\n        let rev_data = JSON.parse(data.data);\n\n        if (rev_data.data.event) {\n          var event = new CustomEvent(rev_data.data.event, {\n            detail: rev_data.data\n          });\n          document.dispatchEvent(event);\n          return;\n        }\n\n        let action = rev_data.action;\n\n        const listeners = _this.listeners.get(rev_data.action);\n\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach(listener => {\n          listener(rev_data.data, key);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n  /**\n   * \n   */\n\n\n  send(action, data, room) {\n    const obj = {\n      action: action,\n      data: data\n    };\n    const key = this.getKeyByRoom(room);\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(JSON.stringify(obj));\n    } else {\n      if (this.messageQueue.get(key)) {\n        this.messageQueue.get(key).push(obj);\n      } else {\n        this.messageQueue.set(key, [obj]);\n      }\n    }\n  }\n\n  sendFile(file, room) {\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(file);\n    }\n  }\n  /**\n   * scope: ns/room\n   */\n\n\n  listen(type, callback) {\n    if (!this.listeners.get(type)) {\n      this.listeners.set(type, [callback]);\n    } else {\n      this.listeners.get(type).push(callback);\n    }\n  }\n\n  reconnect(socket, config) {\n    let _this = this;\n\n    setTimeout(function () {\n      _this.create(config);\n    }, 1000);\n  }\n\n  destroy(socket, key) {\n    if (socket) {\n      socket.onerror = socket.onopen = socket.onclose = null;\n      socket.close();\n      socket = null;\n    }\n\n    if (this.sockets.get(key)) {\n      this.sockets.delete(key);\n    }\n  }\n\n  getKey(namespace, room) {\n    let key = `${this.prefix}`;\n\n    if (namespace && namespace != '') {\n      if (room && room != '') {\n        key += `/${namespace}/${room}`;\n      } else {\n        key += `/${namespace}`;\n      }\n    }\n\n    return key;\n  }\n\n  getByRoom(room) {\n    let key = this.getKeyByRoom(room);\n    return this.sockets.get(key);\n  }\n\n  getKeyByRoom(room) {\n    let key = this.globalScope;\n\n    if (room) {\n      key = `${this.prefix}/${room}`;\n    }\n\n    return key;\n  }\n\n  saveFile(blob) {\n    // const {filename} = window.saveFileInfo;\n    const file_name = this.saveFileName || 'downloadFile';\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = file_name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    this.saveFileName = '';\n  }\n\n  listenAsync(eventname) {\n    return new Promise(resolve => {\n      document.addEventListener(eventname, function (event) {\n        resolve(event.detail);\n      }, {\n        once: true\n      });\n    });\n  }\n\n}\n\nvar _default = CoCreateSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/socket.js\n")},"../../CoCreateJS/src/utils.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.generateUUID = generateUUID;\nexports.isRealTime = isRealTime;\nexports.getParentFromElement = getParentFromElement;\nexports.isReadValue = isReadValue;\nexports.isUpdateValue = isUpdateValue;\nexports.isJsonString = isJsonString;\nexports.getAttributes = getAttributes;\nexports.checkValue = checkValue;\nexports.allFrame = allFrame;\nexports.cssPath = cssPath;\nexports.getTopMostWindow = getTopMostWindow;\nexports.findIframeFromElement = findIframeFromElement;\nexports.getIframeFromPath = getIframeFromPath;\nexports.configMatch2 = configMatch2;\nexports.configExecuter = configExecuter;\nexports.UUID = UUID;\nexports.parseTextToHtml = parseTextToHtml;\nexports.splitBydelimiter = splitBydelimiter;\nexports.joinBydelimiter = joinBydelimiter;\nexports.isValidSelector = isValidSelector;\nexports.getElementPath = getElementPath;\nexports.isUsageY = isUsageY;\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nfunction generateUUID(length = 36) {\n  // if (length == 10) {\n  //   var result           = \'\';\n  //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n  //   var charactersLength = characters.length;\n  //   for ( var i = 0; i < length; i++ ) {\n  //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  //   }\n  //   var dd = new Date().toTimeString();\n  //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n  //   result += random;\n  //   return result;\n  // }\n  let d = new Date().getTime();\n  let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n  let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n  if (length <= pattern.length) {\n    pattern = pattern.substr(0, length);\n  } else {\n    let add_len = length - pattern.length;\n    let sub_pattern = "-xxxyyxxx";\n    let group_n = Math.floor(add_len / sub_pattern.length);\n\n    for (let i = 0; i < group_n; i++) {\n      pattern += sub_pattern;\n    }\n\n    group_n = add_len - group_n * sub_pattern.length;\n    pattern += sub_pattern.substr(0, group_n);\n  }\n\n  let uuid = pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16;\n\n    if (d > 0) {\n      var r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      var r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n\n    return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction isRealTime(element, parent_realTime) {\n  let realtime = element.getAttribute("data-realtime") || parent_realTime;\n\n  if (realtime === "false") {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getParentFromElement(element, parent_class, attributes) {\n  if (parent_class) {\n    if (element.classList.contains(parent_class)) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.classList) {\n      if (node.classList.contains(parent_class)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  } else if (attributes) {\n    if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.attributes) {\n      if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return false;\n}\n\nfunction isReadValue(element) {\n  return element.getAttribute("data-read_value") != "false";\n}\n\nfunction isUpdateValue(element) {\n  return element.getAttribute("data-update_value") != "false";\n}\n\nfunction isJsonString(str_data) {\n  try {\n    let json_data = JSON.parse(str_data);\n\n    if (typeof json_data === "object" && json_data != null) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getAttributes(element) {\n  return element.getAttributeNames().reduce((attrMap, name) => {\n    attrMap[name] = element.getAttribute(name);\n    return attrMap;\n  }, {});\n}\n\nfunction checkValue(value) {\n  if (!value) return false;\n\n  if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n    return false;\n  }\n\n  return true;\n} // hosseins utills\n// function to go through all frames\n\n\nfunction allFrame(callback) {\n  let allFrames = [{\n    document,\n    window\n  }];\n\n  for (let frame of document.querySelectorAll("iframe")) {\n    let frameDocument = frame.contentDocument || frame.contentWindow.document;\n    let frameWindow = frame.contentWindow;\n    allFrames.push({\n      document: frameDocument,\n      window: frameWindow,\n      frameElement: frame\n    });\n  }\n\n  let result = new Set();\n\n  for (let frame of allFrames) {\n    let callbackResult = callback(frame);\n    if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n  }\n\n  return Array.from(result);\n}\n\nfunction cssPath(node) {\n  let pathSplits = [];\n\n  do {\n    if (!node || !node.tagName) return false;\n    let pathSplit = node.tagName.toLowerCase();\n    if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n    if (node.classList.length && node.tagName !== "BODY") {\n      node.classList.forEach(item => {\n        if (item.indexOf(":") === -1) pathSplit += "." + item;\n      });\n    }\n\n    if (node.tagName !== "BODY" && node.parentNode) {\n      let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n      pathSplit += `:nth-child(${index + 1})`;\n    }\n\n    pathSplits.unshift(pathSplit);\n    node = node.parentNode;\n  } while (node.tagName !== "HTML");\n\n  return pathSplits.join(" > ");\n}\n\nfunction getTopMostWindow() {\n  let parentWindow = window;\n\n  while (parentWindow !== window.parent) parentWindow = window.parent;\n\n  return parentWindow;\n}\n\nfunction findIframeFromElement(windowObject, element) {\n  let frameElement;\n  allFrame(frame => {\n    if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n  });\n  return frameElement;\n}\n\nfunction getIframeFromPath(path) {\n  let topWindow = getTopMostWindow;\n  path.forEach(selector => {\n    if (topWindow) topWindow = topWindow.querySelector(selector);\n  });\n  return topWindow;\n} // DO NOT REMOVE\n// configMatch: function* configMatch(elementConfig, element) {\n//   for (let config of elementConfig) {\n//     // if (!Array.isArray(config.selector))\n//     //   config.selector = [config.selector];\n//     if (config.selector && element.matches(config.selector)) yield config;\n//   }\n//   return;\n// },\n\n\nfunction configMatch2(elementConfig, element) {\n  let result = [];\n\n  for (let config of elementConfig) {\n    if (config.selector && element.matches(config.selector)) result.push(config);\n  }\n\n  return result;\n} // DO NOT REMOVE\n// an opiniated function uses configMatch2 to read configs\n// WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n// typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n// element: the element to read attributes\n// key: the key in which is in elementConfig and on match onSuccess callback will be called\n\n\nfunction configExecuter(element, key, onSuccess, elementConfig) {\n  for (let config of configMatch2(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n  return false;\n}\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nfunction parseTextToHtml(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction splitBydelimiter(str, delimiter) {\n  return str.split(delimiter).map(s => s.trim());\n}\n\nfunction joinBydelimiter(str, delimiter) {\n  return str.map(s => s.trim()).join(delimiter);\n}\n\nfunction isValidSelector(selector) {\n  try {\n    document.createDocumentFragment().querySelector(selector);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getElementPath(element, returnContext) {\n  let path = [];\n  let topWindow = window;\n  let iframeElement = findIframeFromElement(topWindow, element);\n  let p = cssPath(iframeElement);\n  if (p) path.unshift(p);\n  return returnContext ? {\n    path,\n    document: iframeElement || document\n  } : path; //todo: support for nested iframe\n  // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n  // {\n  //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n  //   path.unshift(cssPath(iframeElement))\n  // }\n}\n\nfunction isUsageY(input) {\n  if (this.isJsonString(input.getAttribute(\'data-collection\'))) {\n    return false;\n  }\n\n  if (this.isJsonString(input.getAttribute(\'name\'))) {\n    return false;\n  }\n\n  if (input.tagName === "INPUT" && ["text", "email", "tel", "url"].includes(input.type) || input.tagName === "TEXTAREA") {\n    if (!input.getAttribute(\'name\')) {\n      return false;\n    }\n\n    if (input.getAttribute("data-realtime") == "false") {\n      return false;\n    }\n\n    if (input.getAttribute("data-unique") === "true") {\n      return false;\n    }\n\n    if (input.type === \'password\') {\n      return false;\n    }\n\n    if (!this.isReadValue(input)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar _default = {\n  isUsageY,\n  getElementPath,\n  isValidSelector,\n  joinBydelimiter,\n  splitBydelimiter,\n  parseTextToHtml,\n  UUID,\n  configExecuter,\n  configMatch2,\n  getIframeFromPath,\n  findIframeFromElement,\n  getTopMostWindow,\n  cssPath,\n  allFrame,\n  checkValue,\n  getAttributes,\n  isJsonString,\n  isUpdateValue,\n  isReadValue,\n  getParentFromElement,\n  isRealTime,\n  generateUUID\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/utils.js\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));